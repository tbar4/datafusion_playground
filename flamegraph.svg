<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="758" onload="init(evt)" viewBox="0 0 1200 758" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="758" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="741.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="741.00"> </text><svg id="frames" x="10" width="1180" total_samples="121538"><g><title>taxi_data`&lt;futures_util::stream::try_stream::try_collect::TryCollect&lt;St,C&gt; as core::future::future::Future&gt;::poll (13 samples, 0.01%)</title><rect x="0.0074%" y="533" width="0.0107%" height="15" fill="rgb(227,0,7)" fg:x="9" fg:w="13"/><text x="0.2574%" y="543.50"></text></g><g><title>taxi_data`datafusion::dataframe::DataFrame::collect::_{{closure}} (17 samples, 0.01%)</title><rect x="0.0058%" y="549" width="0.0140%" height="15" fill="rgb(217,0,24)" fg:x="7" fg:w="17"/><text x="0.2558%" y="559.50"></text></g><g><title>taxi_data`taxi_data::main::_{{closure}} (24 samples, 0.02%)</title><rect x="0.0033%" y="565" width="0.0197%" height="15" fill="rgb(221,193,54)" fg:x="4" fg:w="24"/><text x="0.2533%" y="575.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (42 samples, 0.03%)</title><rect x="0.0239%" y="533" width="0.0346%" height="15" fill="rgb(248,212,6)" fg:x="29" fg:w="42"/><text x="0.2739%" y="543.50"></text></g><g><title>taxi_data`tokio::runtime::context::runtime::enter_runtime (71 samples, 0.06%)</title><rect x="0.0008%" y="581" width="0.0584%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="71"/><text x="0.2508%" y="591.50"></text></g><g><title>taxi_data`tokio::runtime::park::Inner::park (44 samples, 0.04%)</title><rect x="0.0230%" y="565" width="0.0362%" height="15" fill="rgb(232,128,0)" fg:x="28" fg:w="44"/><text x="0.2730%" y="575.50"></text></g><g><title>taxi_data`parking_lot::condvar::Condvar::wait_until_internal (43 samples, 0.04%)</title><rect x="0.0239%" y="549" width="0.0354%" height="15" fill="rgb(207,160,47)" fg:x="29" fg:w="43"/><text x="0.2739%" y="559.50"></text></g><g><title>dyld`start (73 samples, 0.06%)</title><rect x="0.0000%" y="693" width="0.0601%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="73"/><text x="0.2500%" y="703.50"></text></g><g><title>taxi_data`main (73 samples, 0.06%)</title><rect x="0.0000%" y="677" width="0.0601%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="73"/><text x="0.2500%" y="687.50"></text></g><g><title>taxi_data`std::rt::lang_start_internal (73 samples, 0.06%)</title><rect x="0.0000%" y="661" width="0.0601%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="73"/><text x="0.2500%" y="671.50"></text></g><g><title>taxi_data`std::rt::lang_start::_{{closure}} (73 samples, 0.06%)</title><rect x="0.0000%" y="645" width="0.0601%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="73"/><text x="0.2500%" y="655.50"></text></g><g><title>taxi_data`std::sys::backtrace::__rust_begin_short_backtrace (73 samples, 0.06%)</title><rect x="0.0000%" y="629" width="0.0601%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="73"/><text x="0.2500%" y="639.50"></text></g><g><title>taxi_data`taxi_data::main (73 samples, 0.06%)</title><rect x="0.0000%" y="613" width="0.0601%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="73"/><text x="0.2500%" y="623.50"></text></g><g><title>taxi_data`tokio::runtime::runtime::Runtime::block_on (72 samples, 0.06%)</title><rect x="0.0008%" y="597" width="0.0592%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="72"/><text x="0.2508%" y="607.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (650 samples, 0.53%)</title><rect x="0.0601%" y="693" width="0.5348%" height="15" fill="rgb(217,207,13)" fg:x="73" fg:w="650"/><text x="0.3101%" y="703.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (23 samples, 0.02%)</title><rect x="0.6656%" y="469" width="0.0189%" height="15" fill="rgb(231,73,38)" fg:x="809" fg:w="23"/><text x="0.9156%" y="479.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (35 samples, 0.03%)</title><rect x="0.6591%" y="485" width="0.0288%" height="15" fill="rgb(225,20,46)" fg:x="801" fg:w="35"/><text x="0.9091%" y="495.50"></text></g><g><title>taxi_data`std::sys::pal::unix::time::Timespec::now (36 samples, 0.03%)</title><rect x="0.6591%" y="501" width="0.0296%" height="15" fill="rgb(210,31,41)" fg:x="801" fg:w="36"/><text x="0.9091%" y="511.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (17 samples, 0.01%)</title><rect x="0.7125%" y="469" width="0.0140%" height="15" fill="rgb(221,200,47)" fg:x="866" fg:w="17"/><text x="0.9625%" y="479.50"></text></g><g><title>taxi_data`parking_lot::condvar::Condvar::notify_one_slow (20 samples, 0.02%)</title><rect x="0.7117%" y="485" width="0.0165%" height="15" fill="rgb(226,26,5)" fg:x="865" fg:w="20"/><text x="0.9617%" y="495.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (420 samples, 0.35%)</title><rect x="0.7611%" y="453" width="0.3456%" height="15" fill="rgb(249,33,26)" fg:x="925" fg:w="420"/><text x="1.0111%" y="463.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (29 samples, 0.02%)</title><rect x="1.1066%" y="453" width="0.0239%" height="15" fill="rgb(235,183,28)" fg:x="1345" fg:w="29"/><text x="1.3566%" y="463.50"></text></g><g><title>taxi_data`parking_lot::condvar::Condvar::wait_until_internal (468 samples, 0.39%)</title><rect x="0.7496%" y="469" width="0.3851%" height="15" fill="rgb(221,5,38)" fg:x="911" fg:w="468"/><text x="0.9996%" y="479.50"></text></g><g><title>libsystem_kernel.dylib`kevent (570 samples, 0.47%)</title><rect x="1.1651%" y="437" width="0.4690%" height="15" fill="rgb(247,18,42)" fg:x="1416" fg:w="570"/><text x="1.4151%" y="447.50"></text></g><g><title>taxi_data`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (16 samples, 0.01%)</title><rect x="1.6563%" y="405" width="0.0132%" height="15" fill="rgb(241,131,45)" fg:x="2013" fg:w="16"/><text x="1.9063%" y="415.50"></text></g><g><title>taxi_data`tokio::runtime::io::scheduled_io::ScheduledIo::wake (42 samples, 0.03%)</title><rect x="1.6365%" y="437" width="0.0346%" height="15" fill="rgb(249,31,29)" fg:x="1989" fg:w="42"/><text x="1.8865%" y="447.50"></text></g><g><title>taxi_data`tokio::runtime::task::waker::wake_by_val (21 samples, 0.02%)</title><rect x="1.6538%" y="421" width="0.0173%" height="15" fill="rgb(225,111,53)" fg:x="2010" fg:w="21"/><text x="1.9038%" y="431.50"></text></g><g><title>taxi_data`tokio::runtime::io::driver::Driver::turn (627 samples, 0.52%)</title><rect x="1.1577%" y="453" width="0.5159%" height="15" fill="rgb(238,160,17)" fg:x="1407" fg:w="627"/><text x="1.4077%" y="463.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (23 samples, 0.02%)</title><rect x="1.6826%" y="421" width="0.0189%" height="15" fill="rgb(214,148,48)" fg:x="2045" fg:w="23"/><text x="1.9326%" y="431.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (14 samples, 0.01%)</title><rect x="1.6900%" y="405" width="0.0115%" height="15" fill="rgb(232,36,49)" fg:x="2054" fg:w="14"/><text x="1.9400%" y="415.50"></text></g><g><title>taxi_data`std::sys::pal::unix::time::Timespec::now (24 samples, 0.02%)</title><rect x="1.6826%" y="437" width="0.0197%" height="15" fill="rgb(209,103,24)" fg:x="2045" fg:w="24"/><text x="1.9326%" y="447.50"></text></g><g><title>taxi_data`tokio::runtime::time::wheel::Wheel::next_expiration (19 samples, 0.02%)</title><rect x="1.7130%" y="421" width="0.0156%" height="15" fill="rgb(229,88,8)" fg:x="2082" fg:w="19"/><text x="1.9630%" y="431.50"></text></g><g><title>taxi_data`tokio::runtime::time::wheel::Wheel::poll (37 samples, 0.03%)</title><rect x="1.7287%" y="421" width="0.0304%" height="15" fill="rgb(213,181,19)" fg:x="2101" fg:w="37"/><text x="1.9787%" y="431.50"></text></g><g><title>taxi_data`tokio::runtime::time::wheel::level::Level::next_expiration (20 samples, 0.02%)</title><rect x="1.7427%" y="405" width="0.0165%" height="15" fill="rgb(254,191,54)" fg:x="2118" fg:w="20"/><text x="1.9927%" y="415.50"></text></g><g><title>taxi_data`tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_sharded_time (78 samples, 0.06%)</title><rect x="1.7032%" y="437" width="0.0642%" height="15" fill="rgb(241,83,37)" fg:x="2070" fg:w="78"/><text x="1.9532%" y="447.50"></text></g><g><title>taxi_data`tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::process (112 samples, 0.09%)</title><rect x="1.6768%" y="453" width="0.0922%" height="15" fill="rgb(233,36,39)" fg:x="2038" fg:w="112"/><text x="1.9268%" y="463.50"></text></g><g><title>taxi_data`tokio::runtime::time::Driver::park_internal (790 samples, 0.65%)</title><rect x="1.1387%" y="469" width="0.6500%" height="15" fill="rgb(226,3,54)" fg:x="1384" fg:w="790"/><text x="1.3887%" y="479.50"></text></g><g><title>taxi_data`tokio::runtime::scheduler::multi_thread::park::Parker::park (1,294 samples, 1.06%)</title><rect x="0.7282%" y="485" width="1.0647%" height="15" fill="rgb(245,192,40)" fg:x="885" fg:w="1294"/><text x="0.9782%" y="495.50"></text></g><g><title>taxi_data`tokio::runtime::io::driver::Driver::turn (26 samples, 0.02%)</title><rect x="1.7929%" y="453" width="0.0214%" height="15" fill="rgb(238,167,29)" fg:x="2179" fg:w="26"/><text x="2.0429%" y="463.50"></text></g><g><title>libsystem_kernel.dylib`kevent (25 samples, 0.02%)</title><rect x="1.7937%" y="437" width="0.0206%" height="15" fill="rgb(232,182,51)" fg:x="2180" fg:w="25"/><text x="2.0437%" y="447.50"></text></g><g><title>taxi_data`tokio::runtime::scheduler::multi_thread::park::Parker::park_timeout (36 samples, 0.03%)</title><rect x="1.7929%" y="485" width="0.0296%" height="15" fill="rgb(231,60,39)" fg:x="2179" fg:w="36"/><text x="2.0429%" y="495.50"></text></g><g><title>taxi_data`tokio::runtime::time::Driver::park_internal (36 samples, 0.03%)</title><rect x="1.7929%" y="469" width="0.0296%" height="15" fill="rgb(208,69,12)" fg:x="2179" fg:w="36"/><text x="2.0429%" y="479.50"></text></g><g><title>taxi_data`tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (1,367 samples, 1.12%)</title><rect x="0.6994%" y="501" width="1.1248%" height="15" fill="rgb(235,93,37)" fg:x="850" fg:w="1367"/><text x="0.9494%" y="511.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (94 samples, 0.08%)</title><rect x="1.8406%" y="469" width="0.0773%" height="15" fill="rgb(213,116,39)" fg:x="2237" fg:w="94"/><text x="2.0906%" y="479.50"></text></g><g><title>taxi_data`parking_lot::condvar::Condvar::notify_one_slow (109 samples, 0.09%)</title><rect x="1.8398%" y="485" width="0.0897%" height="15" fill="rgb(222,207,29)" fg:x="2236" fg:w="109"/><text x="2.0898%" y="495.50"></text></g><g><title>taxi_data`futures_core::task::__internal::atomic_waker::AtomicWaker::register (13 samples, 0.01%)</title><rect x="1.9936%" y="389" width="0.0107%" height="15" fill="rgb(206,96,30)" fg:x="2423" fg:w="13"/><text x="2.2436%" y="399.50"></text></g><g><title>taxi_data`hyper::body::incoming::Sender::poll_ready (25 samples, 0.02%)</title><rect x="1.9846%" y="405" width="0.0206%" height="15" fill="rgb(218,138,4)" fg:x="2412" fg:w="25"/><text x="2.2346%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (27 samples, 0.02%)</title><rect x="2.0273%" y="373" width="0.0222%" height="15" fill="rgb(250,191,14)" fg:x="2464" fg:w="27"/><text x="2.2773%" y="383.50"></text></g><g><title>taxi_data`&lt;futures_util::stream::futures_unordered::task::Task&lt;Fut&gt; as futures_task::arc_wake::ArcWake&gt;::wake_by_ref (23 samples, 0.02%)</title><rect x="2.0545%" y="357" width="0.0189%" height="15" fill="rgb(239,60,40)" fg:x="2497" fg:w="23"/><text x="2.3045%" y="367.50"></text></g><g><title>taxi_data`tokio::runtime::task::waker::wake_by_val (16 samples, 0.01%)</title><rect x="2.0603%" y="341" width="0.0132%" height="15" fill="rgb(206,27,48)" fg:x="2504" fg:w="16"/><text x="2.3103%" y="351.50"></text></g><g><title>taxi_data`futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::try_send (65 samples, 0.05%)</title><rect x="2.0224%" y="389" width="0.0535%" height="15" fill="rgb(225,35,8)" fg:x="2458" fg:w="65"/><text x="2.2724%" y="399.50"></text></g><g><title>taxi_data`futures_util::stream::futures_unordered::task::waker_ref::wake_arc_raw (27 samples, 0.02%)</title><rect x="2.0537%" y="373" width="0.0222%" height="15" fill="rgb(250,213,24)" fg:x="2496" fg:w="27"/><text x="2.3037%" y="383.50"></text></g><g><title>taxi_data`hyper::body::incoming::Sender::try_send_data (88 samples, 0.07%)</title><rect x="2.0051%" y="405" width="0.0724%" height="15" fill="rgb(247,123,22)" fg:x="2437" fg:w="88"/><text x="2.2551%" y="415.50"></text></g><g><title>taxi_data`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_flush (15 samples, 0.01%)</title><rect x="2.0792%" y="405" width="0.0123%" height="15" fill="rgb(231,138,38)" fg:x="2527" fg:w="15"/><text x="2.3292%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom (2,755 samples, 2.27%)</title><rect x="2.1565%" y="293" width="2.2668%" height="15" fill="rgb(231,145,46)" fg:x="2621" fg:w="2755"/><text x="2.4065%" y="303.50">l..</text></g><g><title>taxi_data`&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (2,767 samples, 2.28%)</title><rect x="2.1491%" y="309" width="2.2767%" height="15" fill="rgb(251,118,11)" fg:x="2612" fg:w="2767"/><text x="2.3991%" y="319.50">t..</text></g><g><title>taxi_data`tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (2,800 samples, 2.30%)</title><rect x="2.1368%" y="325" width="2.3038%" height="15" fill="rgb(217,147,25)" fg:x="2597" fg:w="2800"/><text x="2.3868%" y="335.50">t..</text></g><g><title>taxi_data`&lt;hyper_util::rt::tokio::TokioIo&lt;T&gt; as hyper::rt::io::Read&gt;::poll_read (2,803 samples, 2.31%)</title><rect x="2.1351%" y="341" width="2.3063%" height="15" fill="rgb(247,81,37)" fg:x="2595" fg:w="2803"/><text x="2.3851%" y="351.50">t..</text></g><g><title>taxi_data`hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (2,831 samples, 2.33%)</title><rect x="2.1253%" y="357" width="2.3293%" height="15" fill="rgb(209,12,38)" fg:x="2583" fg:w="2831"/><text x="2.3753%" y="367.50">t..</text></g><g><title>taxi_data`&lt;hyper::proto::h1::io::Buffered&lt;T,B&gt; as hyper::proto::h1::io::MemRead&gt;::read_mem (2,846 samples, 2.34%)</title><rect x="2.1146%" y="373" width="2.3417%" height="15" fill="rgb(227,1,9)" fg:x="2570" fg:w="2846"/><text x="2.3646%" y="383.50">t..</text></g><g><title>taxi_data`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (2,879 samples, 2.37%)</title><rect x="2.0915%" y="405" width="2.3688%" height="15" fill="rgb(248,47,43)" fg:x="2542" fg:w="2879"/><text x="2.3415%" y="415.50">ta..</text></g><g><title>taxi_data`hyper::proto::h1::decode::Decoder::decode (2,864 samples, 2.36%)</title><rect x="2.1039%" y="389" width="2.3565%" height="15" fill="rgb(221,10,30)" fg:x="2557" fg:w="2864"/><text x="2.3539%" y="399.50">t..</text></g><g><title>taxi_data`hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (3,051 samples, 2.51%)</title><rect x="1.9615%" y="421" width="2.5103%" height="15" fill="rgb(210,229,1)" fg:x="2384" fg:w="3051"/><text x="2.2115%" y="431.50">ta..</text></g><g><title>taxi_data`&lt;hyper::client::conn::http1::upgrades::UpgradeableConnection&lt;I,B&gt; as core::future::future::Future&gt;::poll (3,071 samples, 2.53%)</title><rect x="1.9467%" y="437" width="2.5268%" height="15" fill="rgb(222,148,37)" fg:x="2366" fg:w="3071"/><text x="2.1967%" y="447.50">ta..</text></g><g><title>taxi_data`&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (3,077 samples, 2.53%)</title><rect x="1.9459%" y="453" width="2.5317%" height="15" fill="rgb(234,67,33)" fg:x="2365" fg:w="3077"/><text x="2.1959%" y="463.50">ta..</text></g><g><title>taxi_data`&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (3,081 samples, 2.54%)</title><rect x="1.9442%" y="469" width="2.5350%" height="15" fill="rgb(247,98,35)" fg:x="2363" fg:w="3081"/><text x="2.1942%" y="479.50">ta..</text></g><g><title>taxi_data`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (3,096 samples, 2.55%)</title><rect x="1.9377%" y="485" width="2.5474%" height="15" fill="rgb(247,138,52)" fg:x="2355" fg:w="3096"/><text x="2.1877%" y="495.50">ta..</text></g><g><title>taxi_data`&lt;parquet::arrow::async_reader::store::ParquetObjectReader as parquet::arrow::async_reader::AsyncFileReader&gt;::get_metadata::_{{closure}} (15 samples, 0.01%)</title><rect x="4.5072%" y="421" width="0.0123%" height="15" fill="rgb(213,79,30)" fg:x="5478" fg:w="15"/><text x="4.7572%" y="431.50"></text></g><g><title>taxi_data`&lt;datafusion::datasource::physical_plan::parquet::opener::ParquetOpener as datafusion::datasource::physical_plan::file_stream::FileOpener&gt;::open::_{{closure}} (20 samples, 0.02%)</title><rect x="4.5064%" y="437" width="0.0165%" height="15" fill="rgb(246,177,23)" fg:x="5477" fg:w="20"/><text x="4.7564%" y="447.50"></text></g><g><title>taxi_data`arrow_array::array::primitive_array::_&lt;impl core::convert::From&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt;&gt; for arrow_data::data::ArrayData&gt;::from (26 samples, 0.02%)</title><rect x="4.5862%" y="341" width="0.0214%" height="15" fill="rgb(230,62,27)" fg:x="5574" fg:w="26"/><text x="4.8362%" y="351.50"></text></g><g><title>taxi_data`&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt; as arrow_array::array::Array&gt;::to_data (35 samples, 0.03%)</title><rect x="4.5821%" y="357" width="0.0288%" height="15" fill="rgb(216,154,8)" fg:x="5569" fg:w="35"/><text x="4.8321%" y="367.50"></text></g><g><title>taxi_data`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (50 samples, 0.04%)</title><rect x="4.5722%" y="373" width="0.0411%" height="15" fill="rgb(244,35,45)" fg:x="5557" fg:w="50"/><text x="4.8222%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (22 samples, 0.02%)</title><rect x="4.6529%" y="325" width="0.0181%" height="15" fill="rgb(251,115,12)" fg:x="5655" fg:w="22"/><text x="4.9029%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (18 samples, 0.01%)</title><rect x="4.6562%" y="309" width="0.0148%" height="15" fill="rgb(240,54,50)" fg:x="5659" fg:w="18"/><text x="4.9062%" y="319.50"></text></g><g><title>taxi_data`&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt; as core::convert::From&lt;arrow_data::data::ArrayData&gt;&gt;::from (23 samples, 0.02%)</title><rect x="4.6726%" y="325" width="0.0189%" height="15" fill="rgb(233,84,52)" fg:x="5679" fg:w="23"/><text x="4.9226%" y="335.50"></text></g><g><title>taxi_data`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (82 samples, 0.07%)</title><rect x="4.6282%" y="357" width="0.0675%" height="15" fill="rgb(207,117,47)" fg:x="5625" fg:w="82"/><text x="4.8782%" y="367.50"></text></g><g><title>taxi_data`arrow_array::array::make_array (59 samples, 0.05%)</title><rect x="4.6471%" y="341" width="0.0485%" height="15" fill="rgb(249,43,39)" fg:x="5648" fg:w="59"/><text x="4.8971%" y="351.50"></text></g><g><title>taxi_data`&lt;arrow_array::array::struct_array::StructArray as core::convert::From&lt;arrow_data::data::ArrayData&gt;&gt;::from (96 samples, 0.08%)</title><rect x="4.6200%" y="373" width="0.0790%" height="15" fill="rgb(209,38,44)" fg:x="5615" fg:w="96"/><text x="4.8700%" y="383.50"></text></g><g><title>taxi_data`arrow_array::array::make_array (14 samples, 0.01%)</title><rect x="4.7310%" y="325" width="0.0115%" height="15" fill="rgb(236,212,23)" fg:x="5750" fg:w="14"/><text x="4.9810%" y="335.50"></text></g><g><title>taxi_data`arrow_data::data::ArrayDataBuilder::build_impl (17 samples, 0.01%)</title><rect x="4.7467%" y="325" width="0.0140%" height="15" fill="rgb(242,79,21)" fg:x="5769" fg:w="17"/><text x="4.9967%" y="335.50"></text></g><g><title>taxi_data`&lt;parquet::arrow::array_reader::byte_array::ByteArrayReader&lt;I&gt; as parquet::arrow::array_reader::ArrayReader&gt;::consume_batch (51 samples, 0.04%)</title><rect x="4.7195%" y="357" width="0.0420%" height="15" fill="rgb(211,96,35)" fg:x="5736" fg:w="51"/><text x="4.9695%" y="367.50"></text></g><g><title>taxi_data`parquet::arrow::buffer::offset_buffer::OffsetBuffer&lt;I&gt;::into_array (43 samples, 0.04%)</title><rect x="4.7261%" y="341" width="0.0354%" height="15" fill="rgb(253,215,40)" fg:x="5744" fg:w="43"/><text x="4.9761%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (23 samples, 0.02%)</title><rect x="4.7771%" y="341" width="0.0189%" height="15" fill="rgb(211,81,21)" fg:x="5806" fg:w="23"/><text x="5.0271%" y="351.50"></text></g><g><title>taxi_data`arrow_array::array::primitive_array::_&lt;impl core::convert::From&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt;&gt; for arrow_data::data::ArrayData&gt;::from (13 samples, 0.01%)</title><rect x="4.8306%" y="293" width="0.0107%" height="15" fill="rgb(208,190,38)" fg:x="5871" fg:w="13"/><text x="5.0806%" y="303.50"></text></g><g><title>taxi_data`&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt; as arrow_array::array::Array&gt;::to_data (25 samples, 0.02%)</title><rect x="4.8240%" y="309" width="0.0206%" height="15" fill="rgb(235,213,38)" fg:x="5863" fg:w="25"/><text x="5.0740%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (13 samples, 0.01%)</title><rect x="4.8487%" y="293" width="0.0107%" height="15" fill="rgb(237,122,38)" fg:x="5893" fg:w="13"/><text x="5.0987%" y="303.50"></text></g><g><title>taxi_data`&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt; as core::convert::From&lt;arrow_data::data::ArrayData&gt;&gt;::from (17 samples, 0.01%)</title><rect x="4.8594%" y="293" width="0.0140%" height="15" fill="rgb(244,218,35)" fg:x="5906" fg:w="17"/><text x="5.1094%" y="303.50"></text></g><g><title>taxi_data`arrow_array::array::make_array (36 samples, 0.03%)</title><rect x="4.8479%" y="309" width="0.0296%" height="15" fill="rgb(240,68,47)" fg:x="5892" fg:w="36"/><text x="5.0979%" y="319.50"></text></g><g><title>taxi_data`arrow_cast::cast::cast_with_options (21 samples, 0.02%)</title><rect x="4.8791%" y="309" width="0.0173%" height="15" fill="rgb(210,16,53)" fg:x="5930" fg:w="21"/><text x="5.1291%" y="319.50"></text></g><g><title>taxi_data`arrow_cast::cast::cast (113 samples, 0.09%)</title><rect x="4.8141%" y="341" width="0.0930%" height="15" fill="rgb(235,124,12)" fg:x="5851" fg:w="113"/><text x="5.0641%" y="351.50"></text></g><g><title>taxi_data`arrow_cast::cast::cast_with_options (106 samples, 0.09%)</title><rect x="4.8199%" y="325" width="0.0872%" height="15" fill="rgb(224,169,11)" fg:x="5858" fg:w="106"/><text x="5.0699%" y="335.50"></text></g><g><title>taxi_data`arrow_cast::cast::make_timestamp_array (13 samples, 0.01%)</title><rect x="4.8964%" y="309" width="0.0107%" height="15" fill="rgb(250,166,2)" fg:x="5951" fg:w="13"/><text x="5.1464%" y="319.50"></text></g><g><title>taxi_data`alloc::sync::Arc&lt;T,A&gt;::drop_slow (35 samples, 0.03%)</title><rect x="4.9466%" y="325" width="0.0288%" height="15" fill="rgb(242,216,29)" fg:x="6012" fg:w="35"/><text x="5.1966%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free_small (29 samples, 0.02%)</title><rect x="4.9515%" y="309" width="0.0239%" height="15" fill="rgb(230,116,27)" fg:x="6018" fg:w="29"/><text x="5.2015%" y="319.50"></text></g><g><title>taxi_data`arrow_data::data::ArrayDataBuilder::build_impl (80 samples, 0.07%)</title><rect x="4.9145%" y="341" width="0.0658%" height="15" fill="rgb(228,99,48)" fg:x="5973" fg:w="80"/><text x="5.1645%" y="351.50"></text></g><g><title>taxi_data`&lt;parquet::arrow::array_reader::primitive_array::PrimitiveArrayReader&lt;T&gt; as parquet::arrow::array_reader::ArrayReader&gt;::consume_batch (291 samples, 0.24%)</title><rect x="4.7672%" y="357" width="0.2394%" height="15" fill="rgb(253,11,6)" fg:x="5794" fg:w="291"/><text x="5.0172%" y="367.50"></text></g><g><title>taxi_data`parquet::arrow::record_reader::GenericRecordReader&lt;V,CV&gt;::consume_bitmap (14 samples, 0.01%)</title><rect x="4.9951%" y="341" width="0.0115%" height="15" fill="rgb(247,143,39)" fg:x="6071" fg:w="14"/><text x="5.2451%" y="351.50"></text></g><g><title>taxi_data`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (15 samples, 0.01%)</title><rect x="5.0091%" y="357" width="0.0123%" height="15" fill="rgb(236,97,10)" fg:x="6088" fg:w="15"/><text x="5.2591%" y="367.50"></text></g><g><title>taxi_data`alloc::raw_vec::finish_grow (14 samples, 0.01%)</title><rect x="5.0100%" y="341" width="0.0115%" height="15" fill="rgb(233,208,19)" fg:x="6089" fg:w="14"/><text x="5.2600%" y="351.50"></text></g><g><title>taxi_data`core::iter::adapters::try_process (378 samples, 0.31%)</title><rect x="4.7121%" y="373" width="0.3110%" height="15" fill="rgb(216,164,2)" fg:x="5727" fg:w="378"/><text x="4.9621%" y="383.50"></text></g><g><title>taxi_data`&lt;parquet::arrow::array_reader::struct_array::StructArrayReader as parquet::arrow::array_reader::ArrayReader&gt;::consume_batch (610 samples, 0.50%)</title><rect x="4.5508%" y="389" width="0.5019%" height="15" fill="rgb(220,129,5)" fg:x="5531" fg:w="610"/><text x="4.8008%" y="399.50"></text></g><g><title>taxi_data`core::ptr::drop_in_place&lt;arrow_data::data::ArrayData&gt; (30 samples, 0.02%)</title><rect x="5.0281%" y="373" width="0.0247%" height="15" fill="rgb(242,17,10)" fg:x="6111" fg:w="30"/><text x="5.2781%" y="383.50"></text></g><g><title>taxi_data`core::ptr::drop_in_place&lt;arrow_data::data::ArrayData&gt; (18 samples, 0.01%)</title><rect x="5.0379%" y="357" width="0.0148%" height="15" fill="rgb(242,107,0)" fg:x="6123" fg:w="18"/><text x="5.2879%" y="367.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (13 samples, 0.01%)</title><rect x="5.0610%" y="341" width="0.0107%" height="15" fill="rgb(251,28,31)" fg:x="6151" fg:w="13"/><text x="5.3110%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (56 samples, 0.05%)</title><rect x="5.6172%" y="277" width="0.0461%" height="15" fill="rgb(233,223,10)" fg:x="6827" fg:w="56"/><text x="5.8672%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (52 samples, 0.04%)</title><rect x="5.6205%" y="261" width="0.0428%" height="15" fill="rgb(215,21,27)" fg:x="6831" fg:w="52"/><text x="5.8705%" y="271.50"></text></g><g><title>taxi_data`&lt;parquet::arrow::buffer::offset_buffer::OffsetBuffer&lt;I&gt; as parquet::arrow::record_reader::buffer::ValuesBuffer&gt;::pad_nulls (720 samples, 0.59%)</title><rect x="5.0717%" y="341" width="0.5924%" height="15" fill="rgb(232,23,21)" fg:x="6164" fg:w="720"/><text x="5.3217%" y="351.50"></text></g><g><title>taxi_data`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (57 samples, 0.05%)</title><rect x="5.6172%" y="325" width="0.0469%" height="15" fill="rgb(244,5,23)" fg:x="6827" fg:w="57"/><text x="5.8672%" y="335.50"></text></g><g><title>taxi_data`alloc::raw_vec::finish_grow (57 samples, 0.05%)</title><rect x="5.6172%" y="309" width="0.0469%" height="15" fill="rgb(226,81,46)" fg:x="6827" fg:w="57"/><text x="5.8672%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (57 samples, 0.05%)</title><rect x="5.6172%" y="293" width="0.0469%" height="15" fill="rgb(247,70,30)" fg:x="6827" fg:w="57"/><text x="5.8672%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (37 samples, 0.03%)</title><rect x="5.6690%" y="325" width="0.0304%" height="15" fill="rgb(212,68,19)" fg:x="6890" fg:w="37"/><text x="5.9190%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (66 samples, 0.05%)</title><rect x="5.7628%" y="309" width="0.0543%" height="15" fill="rgb(240,187,13)" fg:x="7004" fg:w="66"/><text x="6.0128%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_memalign (16 samples, 0.01%)</title><rect x="5.8253%" y="261" width="0.0132%" height="15" fill="rgb(223,113,26)" fg:x="7080" fg:w="16"/><text x="6.0753%" y="271.50"></text></g><g><title>taxi_data`__rdl_alloc (18 samples, 0.01%)</title><rect x="5.8245%" y="293" width="0.0148%" height="15" fill="rgb(206,192,2)" fg:x="7079" fg:w="18"/><text x="6.0745%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_posix_memalign (17 samples, 0.01%)</title><rect x="5.8253%" y="277" width="0.0140%" height="15" fill="rgb(241,108,4)" fg:x="7080" fg:w="17"/><text x="6.0753%" y="287.50"></text></g><g><title>taxi_data`arrow_buffer::buffer::mutable::MutableBuffer::reallocate (28 samples, 0.02%)</title><rect x="5.8237%" y="309" width="0.0230%" height="15" fill="rgb(247,173,49)" fg:x="7078" fg:w="28"/><text x="6.0737%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_posix_memalign (17 samples, 0.01%)</title><rect x="5.8624%" y="261" width="0.0140%" height="15" fill="rgb(224,114,35)" fg:x="7125" fg:w="17"/><text x="6.1124%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_memalign (17 samples, 0.01%)</title><rect x="5.8624%" y="245" width="0.0140%" height="15" fill="rgb(245,159,27)" fg:x="7125" fg:w="17"/><text x="6.1124%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_memalign (13 samples, 0.01%)</title><rect x="5.8657%" y="229" width="0.0107%" height="15" fill="rgb(245,172,44)" fg:x="7129" fg:w="13"/><text x="6.1157%" y="239.50"></text></g><g><title>taxi_data`arrow_buffer::builder::boolean::BooleanBufferBuilder::append_packed_range (42 samples, 0.03%)</title><rect x="5.8467%" y="309" width="0.0346%" height="15" fill="rgb(236,23,11)" fg:x="7106" fg:w="42"/><text x="6.0967%" y="319.50"></text></g><g><title>taxi_data`arrow_buffer::buffer::mutable::MutableBuffer::reallocate (33 samples, 0.03%)</title><rect x="5.8541%" y="293" width="0.0272%" height="15" fill="rgb(205,117,38)" fg:x="7115" fg:w="33"/><text x="6.1041%" y="303.50"></text></g><g><title>taxi_data`__rdl_realloc (25 samples, 0.02%)</title><rect x="5.8607%" y="277" width="0.0206%" height="15" fill="rgb(237,72,25)" fg:x="7123" fg:w="25"/><text x="6.1107%" y="287.50"></text></g><g><title>taxi_data`arrow_buffer::util::bit_mask::set_bits (32 samples, 0.03%)</title><rect x="5.8829%" y="309" width="0.0263%" height="15" fill="rgb(244,70,9)" fg:x="7150" fg:w="32"/><text x="6.1329%" y="319.50"></text></g><g><title>taxi_data`&lt;parquet::arrow::record_reader::definition_levels::DefinitionLevelBufferDecoder as parquet::column::reader::decoder::DefinitionLevelDecoder&gt;::read_def_levels (300 samples, 0.25%)</title><rect x="5.6995%" y="325" width="0.2468%" height="15" fill="rgb(217,125,39)" fg:x="6927" fg:w="300"/><text x="5.9495%" y="335.50"></text></g><g><title>taxi_data`parquet::arrow::record_reader::definition_levels::PackedDecoder::next_rle_block (45 samples, 0.04%)</title><rect x="5.9093%" y="309" width="0.0370%" height="15" fill="rgb(235,36,10)" fg:x="7182" fg:w="45"/><text x="6.1593%" y="319.50"></text></g><g><title>taxi_data`arrow_buffer::util::bit_mask::set_bits (27 samples, 0.02%)</title><rect x="5.9537%" y="325" width="0.0222%" height="15" fill="rgb(251,123,47)" fg:x="7236" fg:w="27"/><text x="6.2037%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (718 samples, 0.59%)</title><rect x="5.9817%" y="309" width="0.5908%" height="15" fill="rgb(221,13,13)" fg:x="7270" fg:w="718"/><text x="6.2317%" y="319.50"></text></g><g><title>taxi_data`DYLD-STUB$$memcpy (111 samples, 0.09%)</title><rect x="6.5724%" y="309" width="0.0913%" height="15" fill="rgb(238,131,9)" fg:x="7988" fg:w="111"/><text x="6.8224%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (14 samples, 0.01%)</title><rect x="7.6174%" y="213" width="0.0115%" height="15" fill="rgb(211,50,8)" fg:x="9258" fg:w="14"/><text x="7.8674%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (23 samples, 0.02%)</title><rect x="7.6289%" y="213" width="0.0189%" height="15" fill="rgb(245,182,24)" fg:x="9272" fg:w="23"/><text x="7.8789%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (20 samples, 0.02%)</title><rect x="7.6314%" y="197" width="0.0165%" height="15" fill="rgb(242,14,37)" fg:x="9275" fg:w="20"/><text x="7.8814%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (15 samples, 0.01%)</title><rect x="7.6355%" y="181" width="0.0123%" height="15" fill="rgb(246,228,12)" fg:x="9280" fg:w="15"/><text x="7.8855%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (62 samples, 0.05%)</title><rect x="7.5984%" y="229" width="0.0510%" height="15" fill="rgb(213,55,15)" fg:x="9235" fg:w="62"/><text x="7.8484%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (246 samples, 0.20%)</title><rect x="7.5803%" y="245" width="0.2024%" height="15" fill="rgb(209,9,3)" fg:x="9213" fg:w="246"/><text x="7.8303%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (161 samples, 0.13%)</title><rect x="7.6503%" y="229" width="0.1325%" height="15" fill="rgb(230,59,30)" fg:x="9298" fg:w="161"/><text x="7.9003%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (264 samples, 0.22%)</title><rect x="7.5779%" y="261" width="0.2172%" height="15" fill="rgb(209,121,21)" fg:x="9210" fg:w="264"/><text x="7.8279%" y="271.50"></text></g><g><title>taxi_data`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (276 samples, 0.23%)</title><rect x="7.5705%" y="293" width="0.2271%" height="15" fill="rgb(220,109,13)" fg:x="9201" fg:w="276"/><text x="7.8205%" y="303.50"></text></g><g><title>taxi_data`alloc::raw_vec::finish_grow (269 samples, 0.22%)</title><rect x="7.5762%" y="277" width="0.2213%" height="15" fill="rgb(232,18,1)" fg:x="9208" fg:w="269"/><text x="7.8262%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (14 samples, 0.01%)</title><rect x="7.8428%" y="213" width="0.0115%" height="15" fill="rgb(215,41,42)" fg:x="9532" fg:w="14"/><text x="8.0928%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (14 samples, 0.01%)</title><rect x="7.8428%" y="197" width="0.0115%" height="15" fill="rgb(224,123,36)" fg:x="9532" fg:w="14"/><text x="8.0928%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (45 samples, 0.04%)</title><rect x="7.8198%" y="229" width="0.0370%" height="15" fill="rgb(240,125,3)" fg:x="9504" fg:w="45"/><text x="8.0698%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (152 samples, 0.13%)</title><rect x="7.8058%" y="245" width="0.1251%" height="15" fill="rgb(205,98,50)" fg:x="9487" fg:w="152"/><text x="8.0558%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (89 samples, 0.07%)</title><rect x="7.8576%" y="229" width="0.0732%" height="15" fill="rgb(205,185,37)" fg:x="9550" fg:w="89"/><text x="8.1076%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (156 samples, 0.13%)</title><rect x="7.8041%" y="261" width="0.1284%" height="15" fill="rgb(238,207,15)" fg:x="9485" fg:w="156"/><text x="8.0541%" y="271.50"></text></g><g><title>taxi_data`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (169 samples, 0.14%)</title><rect x="7.7976%" y="293" width="0.1391%" height="15" fill="rgb(213,199,42)" fg:x="9477" fg:w="169"/><text x="8.0476%" y="303.50"></text></g><g><title>taxi_data`alloc::raw_vec::finish_grow (163 samples, 0.13%)</title><rect x="7.8025%" y="277" width="0.1341%" height="15" fill="rgb(235,201,11)" fg:x="9483" fg:w="163"/><text x="8.0525%" y="287.50"></text></g><g><title>taxi_data`parquet::arrow::buffer::offset_buffer::OffsetBuffer&lt;I&gt;::extend_from_dictionary (1,546 samples, 1.27%)</title><rect x="6.6654%" y="309" width="1.2720%" height="15" fill="rgb(207,46,11)" fg:x="8101" fg:w="1546"/><text x="6.9154%" y="319.50"></text></g><g><title>taxi_data`parquet::util::bit_pack::unpack32::unpack (17 samples, 0.01%)</title><rect x="8.0765%" y="293" width="0.0140%" height="15" fill="rgb(241,35,35)" fg:x="9816" fg:w="17"/><text x="8.3265%" y="303.50"></text></g><g><title>taxi_data`parquet::util::bit_util::BitReader::get_batch (110 samples, 0.09%)</title><rect x="8.0905%" y="293" width="0.0905%" height="15" fill="rgb(243,32,47)" fg:x="9833" fg:w="110"/><text x="8.3405%" y="303.50"></text></g><g><title>taxi_data`parquet::util::bit_util::BitReader::get_value (15 samples, 0.01%)</title><rect x="8.1686%" y="277" width="0.0123%" height="15" fill="rgb(247,202,23)" fg:x="9928" fg:w="15"/><text x="8.4186%" y="287.50"></text></g><g><title>taxi_data`parquet::encodings::rle::RleDecoder::get_batch (343 samples, 0.28%)</title><rect x="7.9374%" y="309" width="0.2822%" height="15" fill="rgb(219,102,11)" fg:x="9647" fg:w="343"/><text x="8.1874%" y="319.50"></text></g><g><title>taxi_data`parquet::util::bit_util::BitReader::get_vlq_int (38 samples, 0.03%)</title><rect x="8.1884%" y="293" width="0.0313%" height="15" fill="rgb(243,110,44)" fg:x="9952" fg:w="38"/><text x="8.4384%" y="303.50"></text></g><g><title>taxi_data`parquet::arrow::decoder::dictionary_index::DictIndexDecoder::read (2,723 samples, 2.24%)</title><rect x="5.9817%" y="325" width="2.2405%" height="15" fill="rgb(222,74,54)" fg:x="7270" fg:w="2723"/><text x="6.2317%" y="335.50">t..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (23 samples, 0.02%)</title><rect x="8.2369%" y="293" width="0.0189%" height="15" fill="rgb(216,99,12)" fg:x="10011" fg:w="23"/><text x="8.4869%" y="303.50"></text></g><g><title>taxi_data`miniz_oxide::inflate::core::decompress (466 samples, 0.38%)</title><rect x="8.2764%" y="165" width="0.3834%" height="15" fill="rgb(226,22,26)" fg:x="10059" fg:w="466"/><text x="8.5264%" y="175.50"></text></g><g><title>taxi_data`miniz_oxide::inflate::core::transfer (52 samples, 0.04%)</title><rect x="8.6171%" y="149" width="0.0428%" height="15" fill="rgb(217,163,10)" fg:x="10473" fg:w="52"/><text x="8.8671%" y="159.50"></text></g><g><title>taxi_data`&lt;flate2::gz::bufread::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (491 samples, 0.40%)</title><rect x="8.2657%" y="245" width="0.4040%" height="15" fill="rgb(213,25,53)" fg:x="10046" fg:w="491"/><text x="8.5157%" y="255.50"></text></g><g><title>taxi_data`flate2::zio::read (485 samples, 0.40%)</title><rect x="8.2707%" y="229" width="0.3991%" height="15" fill="rgb(252,105,26)" fg:x="10052" fg:w="485"/><text x="8.5207%" y="239.50"></text></g><g><title>taxi_data`&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (485 samples, 0.40%)</title><rect x="8.2707%" y="213" width="0.3991%" height="15" fill="rgb(220,39,43)" fg:x="10052" fg:w="485"/><text x="8.5207%" y="223.50"></text></g><g><title>taxi_data`miniz_oxide::inflate::stream::inflate (485 samples, 0.40%)</title><rect x="8.2707%" y="197" width="0.3991%" height="15" fill="rgb(229,68,48)" fg:x="10052" fg:w="485"/><text x="8.5207%" y="207.50"></text></g><g><title>taxi_data`miniz_oxide::inflate::stream::inflate_loop (478 samples, 0.39%)</title><rect x="8.2764%" y="181" width="0.3933%" height="15" fill="rgb(252,8,32)" fg:x="10059" fg:w="478"/><text x="8.5264%" y="191.50"></text></g><g><title>taxi_data`crc32fast::Hasher::update (38 samples, 0.03%)</title><rect x="8.6697%" y="245" width="0.0313%" height="15" fill="rgb(223,20,43)" fg:x="10537" fg:w="38"/><text x="8.9197%" y="255.50"></text></g><g><title>taxi_data`parquet::file::serialized_reader::decode_page (541 samples, 0.45%)</title><rect x="8.2567%" y="293" width="0.4451%" height="15" fill="rgb(229,81,49)" fg:x="10035" fg:w="541"/><text x="8.5067%" y="303.50"></text></g><g><title>taxi_data`&lt;parquet::compression::gzip_codec::GZipCodec as parquet::compression::Codec&gt;::decompress (541 samples, 0.45%)</title><rect x="8.2567%" y="277" width="0.4451%" height="15" fill="rgb(236,28,36)" fg:x="10035" fg:w="541"/><text x="8.5067%" y="287.50"></text></g><g><title>taxi_data`std::io::default_read_to_end (530 samples, 0.44%)</title><rect x="8.2657%" y="261" width="0.4361%" height="15" fill="rgb(249,185,26)" fg:x="10046" fg:w="530"/><text x="8.5157%" y="271.50"></text></g><g><title>taxi_data`parquet::column::reader::GenericColumnReader&lt;R,D,V&gt;::read_new_page (574 samples, 0.47%)</title><rect x="8.2303%" y="325" width="0.4723%" height="15" fill="rgb(249,174,33)" fg:x="10003" fg:w="574"/><text x="8.4803%" y="335.50"></text></g><g><title>taxi_data`&lt;parquet::file::serialized_reader::SerializedPageReader&lt;R&gt; as parquet::column::page::PageReader&gt;::get_next_page (572 samples, 0.47%)</title><rect x="8.2320%" y="309" width="0.4706%" height="15" fill="rgb(233,201,37)" fg:x="10005" fg:w="572"/><text x="8.4820%" y="319.50"></text></g><g><title>taxi_data`&lt;parquet::arrow::array_reader::byte_array::ByteArrayReader&lt;I&gt; as parquet::arrow::array_reader::ArrayReader&gt;::read_records (4,430 samples, 3.64%)</title><rect x="5.0585%" y="373" width="3.6450%" height="15" fill="rgb(221,78,26)" fg:x="6148" fg:w="4430"/><text x="5.3085%" y="383.50">taxi..</text></g><g><title>taxi_data`parquet::arrow::record_reader::GenericRecordReader&lt;V,CV&gt;::read_records (4,427 samples, 3.64%)</title><rect x="5.0610%" y="357" width="3.6425%" height="15" fill="rgb(250,127,30)" fg:x="6151" fg:w="4427"/><text x="5.3110%" y="367.50">taxi..</text></g><g><title>taxi_data`parquet::column::reader::GenericColumnReader&lt;R,D,V&gt;::read_records (3,689 samples, 3.04%)</title><rect x="5.6682%" y="341" width="3.0353%" height="15" fill="rgb(230,49,44)" fg:x="6889" fg:w="3689"/><text x="5.9182%" y="351.50">tax..</text></g><g><title>taxi_data`parquet::arrow::record_reader::GenericRecordReader&lt;V,CV&gt;::read_records (20 samples, 0.02%)</title><rect x="8.7043%" y="357" width="0.0165%" height="15" fill="rgb(229,67,23)" fg:x="10579" fg:w="20"/><text x="8.9543%" y="367.50"></text></g><g><title>taxi_data`parquet::column::reader::GenericColumnReader&lt;R,D,V&gt;::read_records (17 samples, 0.01%)</title><rect x="8.7067%" y="341" width="0.0140%" height="15" fill="rgb(249,83,47)" fg:x="10582" fg:w="17"/><text x="8.9567%" y="351.50"></text></g><g><title>taxi_data`&lt;parquet::arrow::array_reader::null_array::NullArrayReader&lt;T&gt; as parquet::arrow::array_reader::ArrayReader&gt;::read_records (22 samples, 0.02%)</title><rect x="8.7035%" y="373" width="0.0181%" height="15" fill="rgb(215,43,3)" fg:x="10578" fg:w="22"/><text x="8.9535%" y="383.50"></text></g><g><title>libsystem_platform.dylib`__bzero (20 samples, 0.02%)</title><rect x="8.7372%" y="341" width="0.0165%" height="15" fill="rgb(238,154,13)" fg:x="10619" fg:w="20"/><text x="8.9872%" y="351.50"></text></g><g><title>taxi_data`&lt;alloc::vec::Vec&lt;T&gt; as parquet::arrow::record_reader::buffer::ValuesBuffer&gt;::pad_nulls (31 samples, 0.03%)</title><rect x="8.7536%" y="341" width="0.0255%" height="15" fill="rgb(219,56,2)" fg:x="10639" fg:w="31"/><text x="9.0036%" y="351.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1,109 samples, 0.91%)</title><rect x="8.7915%" y="325" width="0.9125%" height="15" fill="rgb(233,0,4)" fg:x="10685" fg:w="1109"/><text x="9.0415%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (26 samples, 0.02%)</title><rect x="9.7040%" y="325" width="0.0214%" height="15" fill="rgb(235,30,7)" fg:x="11794" fg:w="26"/><text x="9.9540%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (48 samples, 0.04%)</title><rect x="9.7525%" y="245" width="0.0395%" height="15" fill="rgb(250,79,13)" fg:x="11853" fg:w="48"/><text x="10.0025%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (40 samples, 0.03%)</title><rect x="9.7591%" y="229" width="0.0329%" height="15" fill="rgb(211,146,34)" fg:x="11861" fg:w="40"/><text x="10.0091%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (33 samples, 0.03%)</title><rect x="9.7648%" y="213" width="0.0272%" height="15" fill="rgb(228,22,38)" fg:x="11868" fg:w="33"/><text x="10.0148%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_memalign (58 samples, 0.05%)</title><rect x="9.7484%" y="261" width="0.0477%" height="15" fill="rgb(235,168,5)" fg:x="11848" fg:w="58"/><text x="9.9984%" y="271.50"></text></g><g><title>taxi_data`__rdl_alloc (63 samples, 0.05%)</title><rect x="9.7467%" y="293" width="0.0518%" height="15" fill="rgb(221,155,16)" fg:x="11846" fg:w="63"/><text x="9.9967%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_posix_memalign (62 samples, 0.05%)</title><rect x="9.7476%" y="277" width="0.0510%" height="15" fill="rgb(215,215,53)" fg:x="11847" fg:w="62"/><text x="9.9976%" y="287.50"></text></g><g><title>taxi_data`arrow_buffer::buffer::mutable::MutableBuffer::reallocate (74 samples, 0.06%)</title><rect x="9.7426%" y="309" width="0.0609%" height="15" fill="rgb(223,4,10)" fg:x="11841" fg:w="74"/><text x="9.9926%" y="319.50"></text></g><g><title>taxi_data`&lt;parquet::arrow::record_reader::definition_levels::DefinitionLevelBufferDecoder as parquet::column::reader::decoder::DefinitionLevelDecoder&gt;::read_def_levels (98 samples, 0.08%)</title><rect x="9.7254%" y="325" width="0.0806%" height="15" fill="rgb(234,103,6)" fg:x="11820" fg:w="98"/><text x="9.9754%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (614 samples, 0.51%)</title><rect x="9.8142%" y="309" width="0.5052%" height="15" fill="rgb(227,97,0)" fg:x="11928" fg:w="614"/><text x="10.0642%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (19 samples, 0.02%)</title><rect x="10.3515%" y="261" width="0.0156%" height="15" fill="rgb(234,150,53)" fg:x="12581" fg:w="19"/><text x="10.6015%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (13 samples, 0.01%)</title><rect x="10.3564%" y="245" width="0.0107%" height="15" fill="rgb(228,201,54)" fg:x="12587" fg:w="13"/><text x="10.6064%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (21 samples, 0.02%)</title><rect x="10.3515%" y="277" width="0.0173%" height="15" fill="rgb(222,22,37)" fg:x="12581" fg:w="21"/><text x="10.6015%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_should_clear (43 samples, 0.04%)</title><rect x="10.3754%" y="261" width="0.0354%" height="15" fill="rgb(237,53,32)" fg:x="12610" fg:w="43"/><text x="10.6254%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_from_free_list (35 samples, 0.03%)</title><rect x="10.3819%" y="245" width="0.0288%" height="15" fill="rgb(233,25,53)" fg:x="12618" fg:w="35"/><text x="10.6319%" y="255.50"></text></g><g><title>taxi_data`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (87 samples, 0.07%)</title><rect x="10.3400%" y="309" width="0.0716%" height="15" fill="rgb(210,40,34)" fg:x="12567" fg:w="87"/><text x="10.5900%" y="319.50"></text></g><g><title>taxi_data`alloc::raw_vec::finish_grow (75 samples, 0.06%)</title><rect x="10.3498%" y="293" width="0.0617%" height="15" fill="rgb(241,220,44)" fg:x="12579" fg:w="75"/><text x="10.5998%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (51 samples, 0.04%)</title><rect x="10.3696%" y="277" width="0.0420%" height="15" fill="rgb(235,28,35)" fg:x="12603" fg:w="51"/><text x="10.6196%" y="287.50"></text></g><g><title>taxi_data`parquet::util::bit_pack::unpack16::unpack (51 samples, 0.04%)</title><rect x="13.2543%" y="293" width="0.0420%" height="15" fill="rgb(210,56,17)" fg:x="16109" fg:w="51"/><text x="13.5043%" y="303.50"></text></g><g><title>taxi_data`parquet::util::bit_pack::unpack32::unpack (593 samples, 0.49%)</title><rect x="13.2963%" y="293" width="0.4879%" height="15" fill="rgb(224,130,29)" fg:x="16160" fg:w="593"/><text x="13.5463%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (59 samples, 0.05%)</title><rect x="14.1972%" y="277" width="0.0485%" height="15" fill="rgb(235,212,8)" fg:x="17255" fg:w="59"/><text x="14.4472%" y="287.50"></text></g><g><title>taxi_data`parquet::util::bit_pack::unpack16 (35 samples, 0.03%)</title><rect x="14.2490%" y="277" width="0.0288%" height="15" fill="rgb(223,33,50)" fg:x="17318" fg:w="35"/><text x="14.4990%" y="287.50"></text></g><g><title>taxi_data`parquet::util::bit_pack::unpack32 (63 samples, 0.05%)</title><rect x="14.2778%" y="277" width="0.0518%" height="15" fill="rgb(219,149,13)" fg:x="17353" fg:w="63"/><text x="14.5278%" y="287.50"></text></g><g><title>taxi_data`parquet::util::bit_pack::unpack8 (41 samples, 0.03%)</title><rect x="14.3297%" y="277" width="0.0337%" height="15" fill="rgb(250,156,29)" fg:x="17416" fg:w="41"/><text x="14.5797%" y="287.50"></text></g><g><title>taxi_data`parquet::util::bit_util::BitReader::get_batch (953 samples, 0.78%)</title><rect x="13.7850%" y="293" width="0.7841%" height="15" fill="rgb(216,193,19)" fg:x="16754" fg:w="953"/><text x="14.0350%" y="303.50"></text></g><g><title>taxi_data`parquet::util::bit_util::BitReader::get_value (250 samples, 0.21%)</title><rect x="14.3634%" y="277" width="0.2057%" height="15" fill="rgb(216,135,14)" fg:x="17457" fg:w="250"/><text x="14.6134%" y="287.50"></text></g><g><title>taxi_data`parquet::util::bit_util::BitReader::get_value (95 samples, 0.08%)</title><rect x="14.5691%" y="293" width="0.0782%" height="15" fill="rgb(241,47,5)" fg:x="17707" fg:w="95"/><text x="14.8191%" y="303.50"></text></g><g><title>taxi_data`parquet::encodings::rle::RleDecoder::get_batch_with_dict (5,256 samples, 4.32%)</title><rect x="10.4173%" y="309" width="4.3246%" height="15" fill="rgb(233,42,35)" fg:x="12661" fg:w="5256"/><text x="10.6673%" y="319.50">taxi_..</text></g><g><title>taxi_data`parquet::util::bit_util::BitReader::get_vlq_int (115 samples, 0.09%)</title><rect x="14.6473%" y="293" width="0.0946%" height="15" fill="rgb(231,13,6)" fg:x="17802" fg:w="115"/><text x="14.8973%" y="303.50"></text></g><g><title>taxi_data`parquet::util::bit_util::BitReader::get_batch (32 samples, 0.03%)</title><rect x="14.7419%" y="309" width="0.0263%" height="15" fill="rgb(207,181,40)" fg:x="17917" fg:w="32"/><text x="14.9919%" y="319.50"></text></g><g><title>taxi_data`&lt;parquet::column::reader::decoder::ColumnValueDecoderImpl&lt;T&gt; as parquet::column::reader::decoder::ColumnValueDecoder&gt;::read (6,032 samples, 4.96%)</title><rect x="9.8060%" y="325" width="4.9631%" height="15" fill="rgb(254,173,49)" fg:x="11918" fg:w="6032"/><text x="10.0560%" y="335.50">taxi_d..</text></g><g><title>taxi_data`arrow_buffer::util::bit_chunk_iterator::UnalignedBitChunk::count_ones (22 samples, 0.02%)</title><rect x="14.7797%" y="325" width="0.0181%" height="15" fill="rgb(221,1,38)" fg:x="17963" fg:w="22"/><text x="15.0297%" y="335.50"></text></g><g><title>taxi_data`&lt;parquet::column::reader::decoder::ColumnValueDecoderImpl&lt;T&gt; as parquet::column::reader::decoder::ColumnValueDecoder&gt;::set_data (13 samples, 0.01%)</title><rect x="14.8143%" y="309" width="0.0107%" height="15" fill="rgb(206,124,46)" fg:x="18005" fg:w="13"/><text x="15.0643%" y="319.50"></text></g><g><title>libsystem_platform.dylib`__bzero (339 samples, 0.28%)</title><rect x="14.8332%" y="293" width="0.2789%" height="15" fill="rgb(249,21,11)" fg:x="18028" fg:w="339"/><text x="15.0832%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1,909 samples, 1.57%)</title><rect x="15.1121%" y="293" width="1.5707%" height="15" fill="rgb(222,201,40)" fg:x="18367" fg:w="1909"/><text x="15.3621%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (41 samples, 0.03%)</title><rect x="16.6828%" y="293" width="0.0337%" height="15" fill="rgb(235,61,29)" fg:x="20276" fg:w="41"/><text x="16.9328%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (24 samples, 0.02%)</title><rect x="16.7265%" y="261" width="0.0197%" height="15" fill="rgb(219,207,3)" fg:x="20329" fg:w="24"/><text x="16.9765%" y="271.50"></text></g><g><title>libsystem_platform.dylib`__bzero (19 samples, 0.02%)</title><rect x="16.7306%" y="245" width="0.0156%" height="15" fill="rgb(222,56,46)" fg:x="20334" fg:w="19"/><text x="16.9806%" y="255.50"></text></g><g><title>libsystem_platform.dylib`__bzero (804 samples, 0.66%)</title><rect x="16.7462%" y="261" width="0.6615%" height="15" fill="rgb(239,76,54)" fg:x="20353" fg:w="804"/><text x="16.9962%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (92 samples, 0.08%)</title><rect x="17.4077%" y="261" width="0.0757%" height="15" fill="rgb(231,124,27)" fg:x="21157" fg:w="92"/><text x="17.6577%" y="271.50"></text></g><g><title>libsystem_platform.dylib`__bzero (13 samples, 0.01%)</title><rect x="17.4884%" y="229" width="0.0107%" height="15" fill="rgb(249,195,6)" fg:x="21255" fg:w="13"/><text x="17.7384%" y="239.50"></text></g><g><title>taxi_data`flate2::gz::bufread::GzDecoder&lt;R&gt;::new (29 samples, 0.02%)</title><rect x="17.4834%" y="261" width="0.0239%" height="15" fill="rgb(237,174,47)" fg:x="21249" fg:w="29"/><text x="17.7334%" y="271.50"></text></g><g><title>taxi_data`flate2::mem::Decompress::new (23 samples, 0.02%)</title><rect x="17.4884%" y="245" width="0.0189%" height="15" fill="rgb(206,201,31)" fg:x="21255" fg:w="23"/><text x="17.7384%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (225 samples, 0.19%)</title><rect x="17.5139%" y="229" width="0.1851%" height="15" fill="rgb(231,57,52)" fg:x="21286" fg:w="225"/><text x="17.7639%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (13 samples, 0.01%)</title><rect x="17.7064%" y="197" width="0.0107%" height="15" fill="rgb(248,177,22)" fg:x="21520" fg:w="13"/><text x="17.9564%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (117 samples, 0.10%)</title><rect x="17.7196%" y="181" width="0.0963%" height="15" fill="rgb(215,211,37)" fg:x="21536" fg:w="117"/><text x="17.9696%" y="191.50"></text></g><g><title>taxi_data`miniz_oxide::inflate::core::apply_match (13 samples, 0.01%)</title><rect x="17.8323%" y="165" width="0.0107%" height="15" fill="rgb(241,128,51)" fg:x="21673" fg:w="13"/><text x="18.0823%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (19 samples, 0.02%)</title><rect x="34.2313%" y="149" width="0.0156%" height="15" fill="rgb(227,165,31)" fg:x="41604" fg:w="19"/><text x="34.4813%" y="159.50"></text></g><g><title>taxi_data`miniz_oxide::inflate::core::init_tree (463 samples, 0.38%)</title><rect x="34.2469%" y="149" width="0.3810%" height="15" fill="rgb(228,167,24)" fg:x="41623" fg:w="463"/><text x="34.4969%" y="159.50"></text></g><g><title>taxi_data`miniz_oxide::inflate::core::decompress (25,837 samples, 21.26%)</title><rect x="17.8430%" y="165" width="21.2584%" height="15" fill="rgb(228,143,12)" fg:x="21686" fg:w="25837"/><text x="18.0930%" y="175.50">taxi_data`miniz_oxide::inflate::co..</text></g><g><title>taxi_data`miniz_oxide::inflate::core::transfer (5,437 samples, 4.47%)</title><rect x="34.6279%" y="149" width="4.4735%" height="15" fill="rgb(249,149,8)" fg:x="42086" fg:w="5437"/><text x="34.8779%" y="159.50">taxi_..</text></g><g><title>taxi_data`miniz_oxide::inflate::stream::inflate (26,892 samples, 22.13%)</title><rect x="17.7171%" y="197" width="22.1264%" height="15" fill="rgb(243,35,44)" fg:x="21533" fg:w="26892"/><text x="17.9671%" y="207.50">taxi_data`miniz_oxide::inflate::str..</text></g><g><title>taxi_data`miniz_oxide::inflate::stream::inflate_loop (26,770 samples, 22.03%)</title><rect x="17.8175%" y="181" width="22.0260%" height="15" fill="rgb(246,89,9)" fg:x="21655" fg:w="26770"/><text x="18.0675%" y="191.50">taxi_data`miniz_oxide::inflate::str..</text></g><g><title>taxi_data`miniz_oxide::inflate::core::transfer (902 samples, 0.74%)</title><rect x="39.1014%" y="165" width="0.7422%" height="15" fill="rgb(233,213,13)" fg:x="47523" fg:w="902"/><text x="39.3514%" y="175.50"></text></g><g><title>taxi_data`&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (26,910 samples, 22.14%)</title><rect x="17.7031%" y="213" width="22.1412%" height="15" fill="rgb(233,141,41)" fg:x="21516" fg:w="26910"/><text x="17.9531%" y="223.50">taxi_data`&lt;flate2::mem::Decompress ..</text></g><g><title>taxi_data`&lt;flate2::gz::bufread::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (27,145 samples, 22.33%)</title><rect x="17.5114%" y="245" width="22.3346%" height="15" fill="rgb(239,167,4)" fg:x="21283" fg:w="27145"/><text x="17.7614%" y="255.50">taxi_data`&lt;flate2::gz::bufread::GzD..</text></g><g><title>taxi_data`flate2::zio::read (26,915 samples, 22.15%)</title><rect x="17.7006%" y="229" width="22.1453%" height="15" fill="rgb(209,217,16)" fg:x="21513" fg:w="26915"/><text x="17.9506%" y="239.50">taxi_data`flate2::zio::read</text></g><g><title>taxi_data`crc32fast::Hasher::update (2,547 samples, 2.10%)</title><rect x="39.8460%" y="245" width="2.0956%" height="15" fill="rgb(219,88,35)" fg:x="48428" fg:w="2547"/><text x="40.0960%" y="255.50">t..</text></g><g><title>taxi_data`&lt;parquet::compression::gzip_codec::GZipCodec as parquet::compression::Codec&gt;::decompress (30,653 samples, 25.22%)</title><rect x="16.7232%" y="277" width="25.2209%" height="15" fill="rgb(220,193,23)" fg:x="20325" fg:w="30653"/><text x="16.9732%" y="287.50">taxi_data`&lt;parquet::compression::gzip_co..</text></g><g><title>taxi_data`std::io::default_read_to_end (29,700 samples, 24.44%)</title><rect x="17.5073%" y="261" width="24.4368%" height="15" fill="rgb(230,90,52)" fg:x="21278" fg:w="29700"/><text x="17.7573%" y="271.50">taxi_data`std::io::default_read_to_end</text></g><g><title>taxi_data`parquet::file::serialized_reader::decode_page (30,664 samples, 25.23%)</title><rect x="16.7174%" y="293" width="25.2300%" height="15" fill="rgb(252,106,19)" fg:x="20318" fg:w="30664"/><text x="16.9674%" y="303.50">taxi_data`parquet::file::serialized_read..</text></g><g><title>taxi_data`parquet::file::serialized_reader::read_page_header_len (25 samples, 0.02%)</title><rect x="41.9474%" y="293" width="0.0206%" height="15" fill="rgb(206,74,20)" fg:x="50982" fg:w="25"/><text x="42.1974%" y="303.50"></text></g><g><title>taxi_data`&lt;parquet::file::serialized_reader::SerializedPageReader&lt;R&gt; as parquet::column::page::PageReader&gt;::get_next_page (32,990 samples, 27.14%)</title><rect x="14.8275%" y="309" width="27.1438%" height="15" fill="rgb(230,138,44)" fg:x="18021" fg:w="32990"/><text x="15.0775%" y="319.50">taxi_data`&lt;parquet::file::serialized_reader:..</text></g><g><title>taxi_data`parquet::column::reader::GenericColumnReader&lt;R,D,V&gt;::read_new_page (33,020 samples, 27.17%)</title><rect x="14.8061%" y="325" width="27.1685%" height="15" fill="rgb(235,182,43)" fg:x="17995" fg:w="33020"/><text x="15.0561%" y="335.50">taxi_data`parquet::column::reader::GenericCo..</text></g><g><title>taxi_data`parquet::arrow::record_reader::GenericRecordReader&lt;V,CV&gt;::read_records (40,411 samples, 33.25%)</title><rect x="8.7322%" y="357" width="33.2497%" height="15" fill="rgb(242,16,51)" fg:x="10613" fg:w="40411"/><text x="8.9822%" y="367.50">taxi_data`parquet::arrow::record_reader::GenericRecord..</text></g><g><title>taxi_data`parquet::column::reader::GenericColumnReader&lt;R,D,V&gt;::read_records (40,353 samples, 33.20%)</title><rect x="8.7800%" y="341" width="33.2020%" height="15" fill="rgb(248,9,4)" fg:x="10671" fg:w="40353"/><text x="9.0300%" y="351.50">taxi_data`parquet::column::reader::GenericColumnReader..</text></g><g><title>taxi_data`&lt;parquet::arrow::array_reader::primitive_array::PrimitiveArrayReader&lt;T&gt; as parquet::arrow::array_reader::ArrayReader&gt;::read_records (40,427 samples, 33.26%)</title><rect x="8.7216%" y="373" width="33.2628%" height="15" fill="rgb(210,31,22)" fg:x="10600" fg:w="40427"/><text x="8.9716%" y="383.50">taxi_data`&lt;parquet::arrow::array_reader::primitive_arr..</text></g><g><title>taxi_data`&lt;parquet::arrow::array_reader::struct_array::StructArrayReader as parquet::arrow::array_reader::ArrayReader&gt;::read_records (44,887 samples, 36.93%)</title><rect x="5.0527%" y="389" width="36.9325%" height="15" fill="rgb(239,54,39)" fg:x="6141" fg:w="44887"/><text x="5.3027%" y="399.50">taxi_data`&lt;parquet::arrow::array_reader::struct_array::Struc..</text></g><g><title>taxi_data`&lt;parquet::arrow::arrow_reader::ParquetRecordBatchReader as core::iter::traits::iterator::Iterator&gt;::next (45,526 samples, 37.46%)</title><rect x="4.5311%" y="405" width="37.4582%" height="15" fill="rgb(230,99,41)" fg:x="5507" fg:w="45526"/><text x="4.7811%" y="415.50">taxi_data`&lt;parquet::arrow::arrow_reader::ParquetRecordBatchRe..</text></g><g><title>taxi_data`core::ptr::drop_in_place&lt;core::option::Option&lt;parquet::column::reader::GenericColumnReader&lt;parquet::column::reader::decoder::RepetitionLevelDecoderImpl,parquet::arrow::record_reader::definition_levels::DefinitionLevelBufferDecoder,parquet::arrow::array_reader::byte_array::ByteArrayColumnValueDecoder&lt;i32&gt;&gt;&gt;&gt; (60 samples, 0.05%)</title><rect x="41.9893%" y="357" width="0.0494%" height="15" fill="rgb(253,106,12)" fg:x="51033" fg:w="60"/><text x="42.2393%" y="367.50"></text></g><g><title>taxi_data`core::ptr::drop_in_place&lt;parquet::file::serialized_reader::SerializedPageReader&lt;parquet::arrow::async_reader::ColumnChunkData&gt;&gt; (60 samples, 0.05%)</title><rect x="41.9893%" y="341" width="0.0494%" height="15" fill="rgb(213,46,41)" fg:x="51033" fg:w="60"/><text x="42.2393%" y="351.50"></text></g><g><title>taxi_data`alloc::sync::Arc&lt;T,A&gt;::drop_slow (60 samples, 0.05%)</title><rect x="41.9893%" y="325" width="0.0494%" height="15" fill="rgb(215,133,35)" fg:x="51033" fg:w="60"/><text x="42.2393%" y="335.50"></text></g><g><title>taxi_data`bytes::bytes::shared_drop (60 samples, 0.05%)</title><rect x="41.9893%" y="309" width="0.0494%" height="15" fill="rgb(213,28,5)" fg:x="51033" fg:w="60"/><text x="42.2393%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (60 samples, 0.05%)</title><rect x="41.9893%" y="293" width="0.0494%" height="15" fill="rgb(215,77,49)" fg:x="51033" fg:w="60"/><text x="42.2393%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`madvise (60 samples, 0.05%)</title><rect x="41.9893%" y="277" width="0.0494%" height="15" fill="rgb(248,100,22)" fg:x="51033" fg:w="60"/><text x="42.2393%" y="287.50"></text></g><g><title>taxi_data`core::ptr::drop_in_place&lt;core::option::Option&lt;parquet::column::reader::GenericColumnReader&lt;parquet::column::reader::decoder::RepetitionLevelDecoderImpl,parquet::arrow::record_reader::definition_levels::DefinitionLevelBufferDecoder,parquet::column::reader::decoder::ColumnValueDecoderImpl&lt;parquet::data_type::DoubleType&gt;&gt;&gt;&gt; (15 samples, 0.01%)</title><rect x="42.0387%" y="357" width="0.0123%" height="15" fill="rgb(208,67,9)" fg:x="51093" fg:w="15"/><text x="42.2887%" y="367.50"></text></g><g><title>taxi_data`core::ptr::drop_in_place&lt;parquet::file::serialized_reader::SerializedPageReader&lt;parquet::arrow::async_reader::ColumnChunkData&gt;&gt; (15 samples, 0.01%)</title><rect x="42.0387%" y="341" width="0.0123%" height="15" fill="rgb(219,133,21)" fg:x="51093" fg:w="15"/><text x="42.2887%" y="351.50"></text></g><g><title>taxi_data`alloc::sync::Arc&lt;T,A&gt;::drop_slow (15 samples, 0.01%)</title><rect x="42.0387%" y="325" width="0.0123%" height="15" fill="rgb(246,46,29)" fg:x="51093" fg:w="15"/><text x="42.2887%" y="335.50"></text></g><g><title>taxi_data`bytes::bytes::shared_drop (15 samples, 0.01%)</title><rect x="42.0387%" y="309" width="0.0123%" height="15" fill="rgb(246,185,52)" fg:x="51093" fg:w="15"/><text x="42.2887%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (15 samples, 0.01%)</title><rect x="42.0387%" y="293" width="0.0123%" height="15" fill="rgb(252,136,11)" fg:x="51093" fg:w="15"/><text x="42.2887%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`madvise (15 samples, 0.01%)</title><rect x="42.0387%" y="277" width="0.0123%" height="15" fill="rgb(219,138,53)" fg:x="51093" fg:w="15"/><text x="42.2887%" y="287.50"></text></g><g><title>taxi_data`core::ptr::drop_in_place&lt;parquet::arrow::arrow_reader::ParquetRecordBatchReader&gt; (105 samples, 0.09%)</title><rect x="41.9893%" y="405" width="0.0864%" height="15" fill="rgb(211,51,23)" fg:x="51033" fg:w="105"/><text x="42.2393%" y="415.50"></text></g><g><title>taxi_data`core::ptr::drop_in_place&lt;parquet::arrow::array_reader::struct_array::StructArrayReader&gt; (105 samples, 0.09%)</title><rect x="41.9893%" y="389" width="0.0864%" height="15" fill="rgb(247,221,28)" fg:x="51033" fg:w="105"/><text x="42.2393%" y="399.50"></text></g><g><title>taxi_data`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (105 samples, 0.09%)</title><rect x="41.9893%" y="373" width="0.0864%" height="15" fill="rgb(251,222,45)" fg:x="51033" fg:w="105"/><text x="42.2393%" y="383.50"></text></g><g><title>taxi_data`core::ptr::drop_in_place&lt;core::option::Option&lt;parquet::column::reader::GenericColumnReader&lt;parquet::column::reader::decoder::RepetitionLevelDecoderImpl,parquet::arrow::record_reader::definition_levels::DefinitionLevelBufferDecoder,parquet::column::reader::decoder::ColumnValueDecoderImpl&lt;parquet::data_type::Int32Type&gt;&gt;&gt;&gt; (30 samples, 0.02%)</title><rect x="42.0510%" y="357" width="0.0247%" height="15" fill="rgb(217,162,53)" fg:x="51108" fg:w="30"/><text x="42.3010%" y="367.50"></text></g><g><title>taxi_data`core::ptr::drop_in_place&lt;parquet::file::serialized_reader::SerializedPageReader&lt;parquet::arrow::async_reader::ColumnChunkData&gt;&gt; (30 samples, 0.02%)</title><rect x="42.0510%" y="341" width="0.0247%" height="15" fill="rgb(229,93,14)" fg:x="51108" fg:w="30"/><text x="42.3010%" y="351.50"></text></g><g><title>taxi_data`alloc::sync::Arc&lt;T,A&gt;::drop_slow (30 samples, 0.02%)</title><rect x="42.0510%" y="325" width="0.0247%" height="15" fill="rgb(209,67,49)" fg:x="51108" fg:w="30"/><text x="42.3010%" y="335.50"></text></g><g><title>taxi_data`bytes::bytes::shared_drop (30 samples, 0.02%)</title><rect x="42.0510%" y="309" width="0.0247%" height="15" fill="rgb(213,87,29)" fg:x="51108" fg:w="30"/><text x="42.3010%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (30 samples, 0.02%)</title><rect x="42.0510%" y="293" width="0.0247%" height="15" fill="rgb(205,151,52)" fg:x="51108" fg:w="30"/><text x="42.3010%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`madvise (30 samples, 0.02%)</title><rect x="42.0510%" y="277" width="0.0247%" height="15" fill="rgb(253,215,39)" fg:x="51108" fg:w="30"/><text x="42.3010%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1,371 samples, 1.13%)</title><rect x="42.1407%" y="245" width="1.1280%" height="15" fill="rgb(221,220,41)" fg:x="51217" fg:w="1371"/><text x="42.3907%" y="255.50"></text></g><g><title>taxi_data`futures_channel::mpsc::queue::Queue&lt;T&gt;::pop_spin (24 samples, 0.02%)</title><rect x="43.3198%" y="117" width="0.0197%" height="15" fill="rgb(218,133,21)" fg:x="52650" fg:w="24"/><text x="43.5698%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (15 samples, 0.01%)</title><rect x="43.3461%" y="37" width="0.0123%" height="15" fill="rgb(221,193,43)" fg:x="52682" fg:w="15"/><text x="43.5961%" y="47.50"></text></g><g><title>taxi_data`parking_lot::condvar::Condvar::notify_one_slow (20 samples, 0.02%)</title><rect x="43.3445%" y="53" width="0.0165%" height="15" fill="rgb(240,128,52)" fg:x="52680" fg:w="20"/><text x="43.5945%" y="63.50"></text></g><g><title>taxi_data`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (36 samples, 0.03%)</title><rect x="43.3412%" y="101" width="0.0296%" height="15" fill="rgb(253,114,12)" fg:x="52676" fg:w="36"/><text x="43.5912%" y="111.50"></text></g><g><title>taxi_data`tokio::runtime::context::with_scheduler (34 samples, 0.03%)</title><rect x="43.3428%" y="85" width="0.0280%" height="15" fill="rgb(215,223,47)" fg:x="52678" fg:w="34"/><text x="43.5928%" y="95.50"></text></g><g><title>taxi_data`tokio::runtime::context::scoped::Scoped&lt;T&gt;::with (34 samples, 0.03%)</title><rect x="43.3428%" y="69" width="0.0280%" height="15" fill="rgb(248,225,23)" fg:x="52678" fg:w="34"/><text x="43.5928%" y="79.50"></text></g><g><title>taxi_data`futures_channel::mpsc::Receiver&lt;T&gt;::next_message (86 samples, 0.07%)</title><rect x="43.3025%" y="133" width="0.0708%" height="15" fill="rgb(250,108,0)" fg:x="52629" fg:w="86"/><text x="43.5525%" y="143.50"></text></g><g><title>taxi_data`tokio::runtime::task::waker::wake_by_val (40 samples, 0.03%)</title><rect x="43.3404%" y="117" width="0.0329%" height="15" fill="rgb(228,208,7)" fg:x="52675" fg:w="40"/><text x="43.5904%" y="127.50"></text></g><g><title>taxi_data`&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (92 samples, 0.08%)</title><rect x="43.3017%" y="149" width="0.0757%" height="15" fill="rgb(244,45,10)" fg:x="52628" fg:w="92"/><text x="43.5517%" y="159.50"></text></g><g><title>taxi_data`&lt;http_body_util::combinators::map_err::MapErr&lt;B,F&gt; as http_body::Body&gt;::poll_frame (101 samples, 0.08%)</title><rect x="43.2967%" y="181" width="0.0831%" height="15" fill="rgb(207,125,25)" fg:x="52622" fg:w="101"/><text x="43.5467%" y="191.50"></text></g><g><title>taxi_data`&lt;hyper::body::incoming::Incoming as http_body::Body&gt;::poll_frame (97 samples, 0.08%)</title><rect x="43.3000%" y="165" width="0.0798%" height="15" fill="rgb(210,195,18)" fg:x="52626" fg:w="97"/><text x="43.5500%" y="175.50"></text></g><g><title>taxi_data`&lt;tokio::time::sleep::Sleep as core::future::future::Future&gt;::poll (18 samples, 0.01%)</title><rect x="43.3840%" y="181" width="0.0148%" height="15" fill="rgb(249,80,12)" fg:x="52728" fg:w="18"/><text x="43.6340%" y="191.50"></text></g><g><title>taxi_data`&lt;http_body_util::combinators::map_err::MapErr&lt;B,F&gt; as http_body::Body&gt;::poll_frame (135 samples, 0.11%)</title><rect x="43.2902%" y="197" width="0.1111%" height="15" fill="rgb(221,65,9)" fg:x="52614" fg:w="135"/><text x="43.5402%" y="207.50"></text></g><g><title>taxi_data`&lt;futures_util::stream::stream::map::Map&lt;St,F&gt; as futures_core::stream::Stream&gt;::poll_next (143 samples, 0.12%)</title><rect x="43.2852%" y="229" width="0.1177%" height="15" fill="rgb(235,49,36)" fg:x="52608" fg:w="143"/><text x="43.5352%" y="239.50"></text></g><g><title>taxi_data`&lt;reqwest::async_impl::decoder::Decoder as http_body::Body&gt;::poll_frame (138 samples, 0.11%)</title><rect x="43.2893%" y="213" width="0.1135%" height="15" fill="rgb(225,32,20)" fg:x="52613" fg:w="138"/><text x="43.5393%" y="223.50"></text></g><g><title>taxi_data`object_store::ObjectStore::get_range::_{{closure}} (1,543 samples, 1.27%)</title><rect x="42.1399%" y="261" width="1.2696%" height="15" fill="rgb(215,141,46)" fg:x="51216" fg:w="1543"/><text x="42.3899%" y="271.50"></text></g><g><title>taxi_data`object_store::GetResult::bytes::_{{closure}} (159 samples, 0.13%)</title><rect x="43.2786%" y="245" width="0.1308%" height="15" fill="rgb(250,160,47)" fg:x="52600" fg:w="159"/><text x="43.5286%" y="255.50"></text></g><g><title>taxi_data`&lt;futures_util::stream::futures_unordered::FuturesUnordered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next (1,568 samples, 1.29%)</title><rect x="42.1202%" y="277" width="1.2901%" height="15" fill="rgb(216,222,40)" fg:x="51192" fg:w="1568"/><text x="42.3702%" y="287.50"></text></g><g><title>taxi_data`&lt;futures_util::stream::futures_ordered::FuturesOrdered&lt;Fut&gt; as futures_core::stream::Stream&gt;::poll_next (1,578 samples, 1.30%)</title><rect x="42.1128%" y="293" width="1.2984%" height="15" fill="rgb(234,217,39)" fg:x="51183" fg:w="1578"/><text x="42.3628%" y="303.50"></text></g><g><title>taxi_data`&lt;S as futures_core::stream::TryStream&gt;::try_poll_next (1,587 samples, 1.31%)</title><rect x="42.1078%" y="309" width="1.3058%" height="15" fill="rgb(207,178,40)" fg:x="51177" fg:w="1587"/><text x="42.3578%" y="319.50"></text></g><g><title>taxi_data`&lt;alloc::sync::Arc&lt;dyn object_store::ObjectStore&gt; as object_store::ObjectStore&gt;::get_ranges::_{{closure}} (1,600 samples, 1.32%)</title><rect x="42.0988%" y="341" width="1.3165%" height="15" fill="rgb(221,136,13)" fg:x="51166" fg:w="1600"/><text x="42.3488%" y="351.50"></text></g><g><title>taxi_data`object_store::ObjectStore::get_ranges::_{{closure}} (1,597 samples, 1.31%)</title><rect x="42.1012%" y="325" width="1.3140%" height="15" fill="rgb(249,199,10)" fg:x="51169" fg:w="1597"/><text x="42.3512%" y="335.50"></text></g><g><title>taxi_data`&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1,610 samples, 1.32%)</title><rect x="42.0922%" y="373" width="1.3247%" height="15" fill="rgb(249,222,13)" fg:x="51158" fg:w="1610"/><text x="42.3422%" y="383.50"></text></g><g><title>taxi_data`&lt;parquet::arrow::async_reader::store::ParquetObjectReader as parquet::arrow::async_reader::AsyncFileReader&gt;::get_byte_ranges::_{{closure}}::_{{closure}} (1,605 samples, 1.32%)</title><rect x="42.0963%" y="357" width="1.3206%" height="15" fill="rgb(244,185,38)" fg:x="51163" fg:w="1605"/><text x="42.3463%" y="367.50"></text></g><g><title>taxi_data`&lt;S as futures_core::stream::TryStream&gt;::try_poll_next (47,271 samples, 38.89%)</title><rect x="4.5253%" y="421" width="38.8940%" height="15" fill="rgb(236,202,9)" fg:x="5500" fg:w="47271"/><text x="4.7753%" y="431.50">taxi_data`&lt;S as futures_core::stream::TryStream&gt;::try_poll_next</text></g><g><title>taxi_data`parquet::arrow::async_reader::ReaderFactory&lt;T&gt;::read_row_group::_{{closure}} (1,630 samples, 1.34%)</title><rect x="42.0782%" y="405" width="1.3411%" height="15" fill="rgb(250,229,37)" fg:x="51141" fg:w="1630"/><text x="42.3282%" y="415.50"></text></g><g><title>taxi_data`parquet::arrow::async_reader::InMemoryRowGroup::fetch::_{{closure}} (1,622 samples, 1.33%)</title><rect x="42.0848%" y="389" width="1.3346%" height="15" fill="rgb(206,174,23)" fg:x="51149" fg:w="1622"/><text x="42.3348%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (18 samples, 0.01%)</title><rect x="43.4893%" y="325" width="0.0148%" height="15" fill="rgb(211,33,43)" fg:x="52856" fg:w="18"/><text x="43.7393%" y="335.50"></text></g><g><title>taxi_data`&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as core::convert::From&lt;arrow_data::data::ArrayData&gt;&gt;::from (14 samples, 0.01%)</title><rect x="43.5041%" y="325" width="0.0115%" height="15" fill="rgb(245,58,50)" fg:x="52874" fg:w="14"/><text x="43.7541%" y="335.50"></text></g><g><title>taxi_data`arrow_array::array::make_array (56 samples, 0.05%)</title><rect x="43.4778%" y="341" width="0.0461%" height="15" fill="rgb(244,68,36)" fg:x="52842" fg:w="56"/><text x="43.7278%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (18 samples, 0.01%)</title><rect x="43.5419%" y="325" width="0.0148%" height="15" fill="rgb(232,229,15)" fg:x="52920" fg:w="18"/><text x="43.7919%" y="335.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1,755 samples, 1.44%)</title><rect x="43.5617%" y="309" width="1.4440%" height="15" fill="rgb(254,30,23)" fg:x="52944" fg:w="1755"/><text x="43.8117%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (24 samples, 0.02%)</title><rect x="45.0057%" y="309" width="0.0197%" height="15" fill="rgb(235,160,14)" fg:x="54699" fg:w="24"/><text x="45.2557%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_should_clear (19 samples, 0.02%)</title><rect x="45.0345%" y="245" width="0.0156%" height="15" fill="rgb(212,155,44)" fg:x="54734" fg:w="19"/><text x="45.2845%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_memalign (39 samples, 0.03%)</title><rect x="45.0279%" y="277" width="0.0321%" height="15" fill="rgb(226,2,50)" fg:x="54726" fg:w="39"/><text x="45.2779%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (35 samples, 0.03%)</title><rect x="45.0312%" y="261" width="0.0288%" height="15" fill="rgb(234,177,6)" fg:x="54730" fg:w="35"/><text x="45.2812%" y="271.50"></text></g><g><title>taxi_data`arrow_buffer::buffer::mutable::MutableBuffer::from_len_zeroed (1,824 samples, 1.50%)</title><rect x="43.5600%" y="325" width="1.5008%" height="15" fill="rgb(217,24,9)" fg:x="52942" fg:w="1824"/><text x="43.8100%" y="335.50"></text></g><g><title>taxi_data`__rdl_alloc_zeroed (42 samples, 0.03%)</title><rect x="45.0262%" y="309" width="0.0346%" height="15" fill="rgb(220,13,46)" fg:x="54724" fg:w="42"/><text x="45.2762%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_posix_memalign (41 samples, 0.03%)</title><rect x="45.0271%" y="293" width="0.0337%" height="15" fill="rgb(239,221,27)" fg:x="54725" fg:w="41"/><text x="45.2771%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (33 samples, 0.03%)</title><rect x="45.0723%" y="293" width="0.0272%" height="15" fill="rgb(222,198,25)" fg:x="54780" fg:w="33"/><text x="45.3223%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (26 samples, 0.02%)</title><rect x="45.1061%" y="245" width="0.0214%" height="15" fill="rgb(211,99,13)" fg:x="54821" fg:w="26"/><text x="45.3561%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (21 samples, 0.02%)</title><rect x="45.1102%" y="229" width="0.0173%" height="15" fill="rgb(232,111,31)" fg:x="54826" fg:w="21"/><text x="45.3602%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (18 samples, 0.01%)</title><rect x="45.1126%" y="213" width="0.0148%" height="15" fill="rgb(245,82,37)" fg:x="54829" fg:w="18"/><text x="45.3626%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_memalign (31 samples, 0.03%)</title><rect x="45.1028%" y="261" width="0.0255%" height="15" fill="rgb(227,149,46)" fg:x="54817" fg:w="31"/><text x="45.3528%" y="271.50"></text></g><g><title>taxi_data`__rdl_alloc_zeroed (34 samples, 0.03%)</title><rect x="45.1011%" y="293" width="0.0280%" height="15" fill="rgb(218,36,50)" fg:x="54815" fg:w="34"/><text x="45.3511%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_posix_memalign (33 samples, 0.03%)</title><rect x="45.1019%" y="277" width="0.0272%" height="15" fill="rgb(226,80,48)" fg:x="54816" fg:w="33"/><text x="45.3519%" y="287.50"></text></g><g><title>taxi_data`arrow_buffer::buffer::null::NullBuffer::new_null (85 samples, 0.07%)</title><rect x="45.0608%" y="325" width="0.0699%" height="15" fill="rgb(238,224,15)" fg:x="54766" fg:w="85"/><text x="45.3108%" y="335.50"></text></g><g><title>taxi_data`arrow_buffer::buffer::boolean::BooleanBuffer::new_unset (83 samples, 0.07%)</title><rect x="45.0624%" y="309" width="0.0683%" height="15" fill="rgb(241,136,10)" fg:x="54768" fg:w="83"/><text x="45.3124%" y="319.50"></text></g><g><title>taxi_data`arrow_array::array::new_null_array (2,086 samples, 1.72%)</title><rect x="43.4720%" y="357" width="1.7163%" height="15" fill="rgb(208,32,45)" fg:x="52835" fg:w="2086"/><text x="43.7220%" y="367.50"></text></g><g><title>taxi_data`arrow_data::data::ArrayData::new_null (2,021 samples, 1.66%)</title><rect x="43.5255%" y="341" width="1.6629%" height="15" fill="rgb(207,135,9)" fg:x="52900" fg:w="2021"/><text x="43.7755%" y="351.50"></text></g><g><title>taxi_data`arrow_data::data::ArrayDataBuilder::build_impl (70 samples, 0.06%)</title><rect x="45.1307%" y="325" width="0.0576%" height="15" fill="rgb(206,86,44)" fg:x="54851" fg:w="70"/><text x="45.3807%" y="335.50"></text></g><g><title>taxi_data`&lt;&amp;arrow_array::array::primitive_array::PrimitiveArray&lt;arrow_array::types::TimestampMicrosecondType&gt; as arrow_cast::display::DisplayIndexState&gt;::write (728 samples, 0.60%)</title><rect x="45.1900%" y="341" width="0.5990%" height="15" fill="rgb(245,177,15)" fg:x="54923" fg:w="728"/><text x="45.4400%" y="351.50"></text></g><g><title>taxi_data`&lt;arrow_cast::display::ArrayFormat&lt;F&gt; as arrow_cast::display::DisplayIndex&gt;::write (235 samples, 0.19%)</title><rect x="45.8030%" y="341" width="0.1934%" height="15" fill="rgb(206,64,50)" fg:x="55668" fg:w="235"/><text x="46.0530%" y="351.50"></text></g><g><title>taxi_data`arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::append_value (697 samples, 0.57%)</title><rect x="45.9988%" y="341" width="0.5735%" height="15" fill="rgb(234,36,40)" fg:x="55906" fg:w="697"/><text x="46.2488%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (20 samples, 0.02%)</title><rect x="46.5747%" y="325" width="0.0165%" height="15" fill="rgb(213,64,8)" fg:x="56606" fg:w="20"/><text x="46.8247%" y="335.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1,369 samples, 1.13%)</title><rect x="46.5912%" y="325" width="1.1264%" height="15" fill="rgb(210,75,36)" fg:x="56626" fg:w="1369"/><text x="46.8412%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (29 samples, 0.02%)</title><rect x="47.7176%" y="325" width="0.0239%" height="15" fill="rgb(229,88,21)" fg:x="57995" fg:w="29"/><text x="47.9676%" y="335.50"></text></g><g><title>taxi_data`&lt;arrow_buffer::util::bit_iterator::BitIndexIterator as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.01%)</title><rect x="47.7414%" y="325" width="0.0132%" height="15" fill="rgb(252,204,47)" fg:x="58024" fg:w="16"/><text x="47.9914%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (72 samples, 0.06%)</title><rect x="48.8794%" y="261" width="0.0592%" height="15" fill="rgb(208,77,27)" fg:x="59407" fg:w="72"/><text x="49.1294%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (62 samples, 0.05%)</title><rect x="48.8876%" y="245" width="0.0510%" height="15" fill="rgb(221,76,26)" fg:x="59417" fg:w="62"/><text x="49.1376%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (38 samples, 0.03%)</title><rect x="48.9073%" y="229" width="0.0313%" height="15" fill="rgb(225,139,18)" fg:x="59441" fg:w="38"/><text x="49.1573%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_memalign (80 samples, 0.07%)</title><rect x="48.8736%" y="277" width="0.0658%" height="15" fill="rgb(230,137,11)" fg:x="59400" fg:w="80"/><text x="49.1236%" y="287.50"></text></g><g><title>taxi_data`__rdl_alloc (90 samples, 0.07%)</title><rect x="48.8703%" y="309" width="0.0741%" height="15" fill="rgb(212,28,1)" fg:x="59396" fg:w="90"/><text x="49.1203%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_posix_memalign (87 samples, 0.07%)</title><rect x="48.8728%" y="293" width="0.0716%" height="15" fill="rgb(248,164,17)" fg:x="59399" fg:w="87"/><text x="49.1228%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (27 samples, 0.02%)</title><rect x="48.9452%" y="293" width="0.0222%" height="15" fill="rgb(222,171,42)" fg:x="59487" fg:w="27"/><text x="49.1952%" y="303.50"></text></g><g><title>taxi_data`arrow_buffer::builder::boolean::BooleanBufferBuilder::finish (30 samples, 0.02%)</title><rect x="48.9452%" y="309" width="0.0247%" height="15" fill="rgb(243,84,45)" fg:x="59487" fg:w="30"/><text x="49.1952%" y="319.50"></text></g><g><title>taxi_data`arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt;::unary_opt (1,476 samples, 1.21%)</title><rect x="47.7595%" y="325" width="1.2144%" height="15" fill="rgb(252,49,23)" fg:x="58046" fg:w="1476"/><text x="48.0095%" y="335.50"></text></g><g><title>taxi_data`arrow_cast::cast::cast_numeric_arrays (2,923 samples, 2.41%)</title><rect x="46.5739%" y="341" width="2.4050%" height="15" fill="rgb(215,19,7)" fg:x="56605" fg:w="2923"/><text x="46.8239%" y="351.50">ta..</text></g><g><title>libsystem_platform.dylib`__bzero (219 samples, 0.18%)</title><rect x="49.0217%" y="277" width="0.1802%" height="15" fill="rgb(238,81,41)" fg:x="59580" fg:w="219"/><text x="49.2717%" y="287.50"></text></g><g><title>taxi_data`arrow_buffer::buffer::mutable::MutableBuffer::from_len_zeroed (232 samples, 0.19%)</title><rect x="49.0217%" y="293" width="0.1909%" height="15" fill="rgb(210,199,37)" fg:x="59580" fg:w="232"/><text x="49.2717%" y="303.50"></text></g><g><title>taxi_data`__rdl_alloc_zeroed (13 samples, 0.01%)</title><rect x="49.2019%" y="277" width="0.0107%" height="15" fill="rgb(244,192,49)" fg:x="59799" fg:w="13"/><text x="49.4519%" y="287.50"></text></g><g><title>taxi_data`arrow_cast::cast::cast_with_options (305 samples, 0.25%)</title><rect x="48.9789%" y="341" width="0.2510%" height="15" fill="rgb(226,211,11)" fg:x="59528" fg:w="305"/><text x="49.2289%" y="351.50"></text></g><g><title>taxi_data`arrow_array::array::new_null_array (272 samples, 0.22%)</title><rect x="49.0061%" y="325" width="0.2238%" height="15" fill="rgb(236,162,54)" fg:x="59561" fg:w="272"/><text x="49.2561%" y="335.50"></text></g><g><title>taxi_data`arrow_data::data::ArrayData::new_null (262 samples, 0.22%)</title><rect x="49.0143%" y="309" width="0.2156%" height="15" fill="rgb(220,229,9)" fg:x="59571" fg:w="262"/><text x="49.2643%" y="319.50"></text></g><g><title>taxi_data`arrow_cast::cast::string::parse_string (353 samples, 0.29%)</title><rect x="49.2299%" y="341" width="0.2904%" height="15" fill="rgb(250,87,22)" fg:x="59833" fg:w="353"/><text x="49.4799%" y="351.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (788 samples, 0.65%)</title><rect x="49.7976%" y="325" width="0.6484%" height="15" fill="rgb(239,43,17)" fg:x="60523" fg:w="788"/><text x="50.0476%" y="335.50"></text></g><g><title>taxi_data`chrono::naive::date::NaiveDate::from_num_days_from_ce_opt (2,186 samples, 1.80%)</title><rect x="52.0932%" y="293" width="1.7986%" height="15" fill="rgb(231,177,25)" fg:x="63313" fg:w="2186"/><text x="52.3432%" y="303.50">t..</text></g><g><title>taxi_data`arrow_array::temporal_conversions::as_datetime (3,937 samples, 3.24%)</title><rect x="51.0211%" y="309" width="3.2393%" height="15" fill="rgb(219,179,1)" fg:x="62010" fg:w="3937"/><text x="51.2711%" y="319.50">tax..</text></g><g><title>taxi_data`core::ptr::drop_in_place&lt;arrow_schema::datatype::DataType&gt; (448 samples, 0.37%)</title><rect x="53.8918%" y="293" width="0.3686%" height="15" fill="rgb(238,219,53)" fg:x="65499" fg:w="448"/><text x="54.1418%" y="303.50"></text></g><g><title>taxi_data`&lt;chrono::naive::datetime::NaiveDateTime as core::fmt::Debug&gt;::fmt (32 samples, 0.03%)</title><rect x="54.9088%" y="293" width="0.0263%" height="15" fill="rgb(232,167,36)" fg:x="66735" fg:w="32"/><text x="55.1588%" y="303.50"></text></g><g><title>taxi_data`&lt;chrono::naive::time::NaiveTime as core::fmt::Debug&gt;::fmt (1,007 samples, 0.83%)</title><rect x="54.9351%" y="293" width="0.8285%" height="15" fill="rgb(244,19,51)" fg:x="66767" fg:w="1007"/><text x="55.1851%" y="303.50"></text></g><g><title>taxi_data`&lt;chrono::naive::date::NaiveDate as core::fmt::Debug&gt;::fmt (199 samples, 0.16%)</title><rect x="56.8193%" y="277" width="0.1637%" height="15" fill="rgb(224,6,22)" fg:x="69057" fg:w="199"/><text x="57.0693%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (789 samples, 0.65%)</title><rect x="57.0653%" y="261" width="0.6492%" height="15" fill="rgb(224,145,5)" fg:x="69356" fg:w="789"/><text x="57.3153%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (7,255 samples, 5.97%)</title><rect x="58.7561%" y="245" width="5.9693%" height="15" fill="rgb(234,130,49)" fg:x="71411" fg:w="7255"/><text x="59.0061%" y="255.50">libsyste..</text></g><g><title>taxi_data`&lt;core::fmt::Formatter as core::fmt::Write&gt;::write_char (2,663 samples, 2.19%)</title><rect x="64.7254%" y="245" width="2.1911%" height="15" fill="rgb(254,6,2)" fg:x="78666" fg:w="2663"/><text x="64.9754%" y="255.50">t..</text></g><g><title>taxi_data`DYLD-STUB$$memcpy (2,529 samples, 2.08%)</title><rect x="66.9165%" y="245" width="2.0808%" height="15" fill="rgb(208,96,46)" fg:x="81329" fg:w="2529"/><text x="67.1665%" y="255.50">t..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (442 samples, 0.36%)</title><rect x="74.2879%" y="213" width="0.3637%" height="15" fill="rgb(239,3,39)" fg:x="90288" fg:w="442"/><text x="74.5379%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_posix_memalign (24 samples, 0.02%)</title><rect x="74.6532%" y="197" width="0.0197%" height="15" fill="rgb(233,210,1)" fg:x="90732" fg:w="24"/><text x="74.9032%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_memalign (24 samples, 0.02%)</title><rect x="74.6532%" y="181" width="0.0197%" height="15" fill="rgb(244,137,37)" fg:x="90732" fg:w="24"/><text x="74.9032%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (23 samples, 0.02%)</title><rect x="74.6540%" y="165" width="0.0189%" height="15" fill="rgb(240,136,2)" fg:x="90733" fg:w="23"/><text x="74.9040%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (14 samples, 0.01%)</title><rect x="74.6614%" y="149" width="0.0115%" height="15" fill="rgb(239,18,37)" fg:x="90742" fg:w="14"/><text x="74.9114%" y="159.50"></text></g><g><title>taxi_data`&lt;chrono::naive::date::NaiveDate as core::fmt::Debug&gt;::fmt (20,632 samples, 16.98%)</title><rect x="57.7145%" y="261" width="16.9758%" height="15" fill="rgb(218,185,22)" fg:x="70145" fg:w="20632"/><text x="57.9645%" y="271.50">taxi_data`&lt;chrono::naive::..</text></g><g><title>taxi_data`core::fmt::Write::write_char (6,919 samples, 5.69%)</title><rect x="68.9974%" y="245" width="5.6929%" height="15" fill="rgb(225,218,4)" fg:x="83858" fg:w="6919"/><text x="69.2474%" y="255.50">taxi_da..</text></g><g><title>taxi_data`arrow_buffer::buffer::mutable::MutableBuffer::reallocate (492 samples, 0.40%)</title><rect x="74.2854%" y="229" width="0.4048%" height="15" fill="rgb(230,182,32)" fg:x="90285" fg:w="492"/><text x="74.5354%" y="239.50"></text></g><g><title>taxi_data`__rdl_realloc (47 samples, 0.04%)</title><rect x="74.6515%" y="213" width="0.0387%" height="15" fill="rgb(242,56,43)" fg:x="90730" fg:w="47"/><text x="74.9015%" y="223.50"></text></g><g><title>taxi_data`&lt;core::fmt::Formatter as core::fmt::Write&gt;::write_char (865 samples, 0.71%)</title><rect x="74.6902%" y="261" width="0.7117%" height="15" fill="rgb(233,99,24)" fg:x="90777" fg:w="865"/><text x="74.9402%" y="271.50"></text></g><g><title>taxi_data`DYLD-STUB$$memcpy (208 samples, 0.17%)</title><rect x="75.4019%" y="261" width="0.1711%" height="15" fill="rgb(234,209,42)" fg:x="91642" fg:w="208"/><text x="75.6519%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1,043 samples, 0.86%)</title><rect x="78.2611%" y="229" width="0.8582%" height="15" fill="rgb(227,7,12)" fg:x="95117" fg:w="1043"/><text x="78.5111%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_memalign (17 samples, 0.01%)</title><rect x="79.1201%" y="197" width="0.0140%" height="15" fill="rgb(245,203,43)" fg:x="96161" fg:w="17"/><text x="79.3701%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (14 samples, 0.01%)</title><rect x="79.1226%" y="181" width="0.0115%" height="15" fill="rgb(238,205,33)" fg:x="96164" fg:w="14"/><text x="79.3726%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_posix_memalign (19 samples, 0.02%)</title><rect x="79.1201%" y="213" width="0.0156%" height="15" fill="rgb(231,56,7)" fg:x="96161" fg:w="19"/><text x="79.3701%" y="223.50"></text></g><g><title>taxi_data`&lt;chrono::naive::datetime::NaiveDateTime as core::fmt::Debug&gt;::fmt (26,939 samples, 22.17%)</title><rect x="56.9830%" y="277" width="22.1651%" height="15" fill="rgb(244,186,29)" fg:x="69256" fg:w="26939"/><text x="57.2330%" y="287.50">taxi_data`&lt;chrono::naive::datetime:..</text></g><g><title>taxi_data`core::fmt::Write::write_char (4,345 samples, 3.58%)</title><rect x="75.5731%" y="261" width="3.5750%" height="15" fill="rgb(234,111,31)" fg:x="91850" fg:w="4345"/><text x="75.8231%" y="271.50">taxi..</text></g><g><title>taxi_data`arrow_buffer::buffer::mutable::MutableBuffer::reallocate (1,080 samples, 0.89%)</title><rect x="78.2595%" y="245" width="0.8886%" height="15" fill="rgb(241,149,10)" fg:x="95115" fg:w="1080"/><text x="78.5095%" y="255.50"></text></g><g><title>taxi_data`__rdl_realloc (34 samples, 0.03%)</title><rect x="79.1201%" y="229" width="0.0280%" height="15" fill="rgb(249,206,44)" fg:x="96161" fg:w="34"/><text x="79.3701%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (5,952 samples, 4.90%)</title><rect x="80.1116%" y="261" width="4.8972%" height="15" fill="rgb(251,153,30)" fg:x="97366" fg:w="5952"/><text x="80.3616%" y="271.50">libsys..</text></g><g><title>taxi_data`&lt;core::fmt::Formatter as core::fmt::Write&gt;::write_char (2,548 samples, 2.10%)</title><rect x="85.0088%" y="261" width="2.0965%" height="15" fill="rgb(239,152,38)" fg:x="103318" fg:w="2548"/><text x="85.2588%" y="271.50">t..</text></g><g><title>taxi_data`DYLD-STUB$$memcpy (2,034 samples, 1.67%)</title><rect x="87.1053%" y="261" width="1.6736%" height="15" fill="rgb(249,139,47)" fg:x="105866" fg:w="2034"/><text x="87.3553%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (240 samples, 0.20%)</title><rect x="92.7364%" y="229" width="0.1975%" height="15" fill="rgb(244,64,35)" fg:x="112710" fg:w="240"/><text x="92.9864%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_memalign (22 samples, 0.02%)</title><rect x="92.9355%" y="197" width="0.0181%" height="15" fill="rgb(216,46,15)" fg:x="112952" fg:w="22"/><text x="93.1855%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (22 samples, 0.02%)</title><rect x="92.9355%" y="181" width="0.0181%" height="15" fill="rgb(250,74,19)" fg:x="112952" fg:w="22"/><text x="93.1855%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_posix_memalign (23 samples, 0.02%)</title><rect x="92.9355%" y="213" width="0.0189%" height="15" fill="rgb(249,42,33)" fg:x="112952" fg:w="23"/><text x="93.1855%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_small (21 samples, 0.02%)</title><rect x="92.9561%" y="213" width="0.0173%" height="15" fill="rgb(242,149,17)" fg:x="112977" fg:w="21"/><text x="93.2061%" y="223.50"></text></g><g><title>taxi_data`__rdl_realloc (50 samples, 0.04%)</title><rect x="92.9339%" y="229" width="0.0411%" height="15" fill="rgb(244,29,21)" fg:x="112950" fg:w="50"/><text x="93.1839%" y="239.50"></text></g><g><title>taxi_data`&lt;chrono::naive::time::NaiveTime as core::fmt::Debug&gt;::fmt (16,806 samples, 13.83%)</title><rect x="79.1481%" y="277" width="13.8278%" height="15" fill="rgb(220,130,37)" fg:x="96195" fg:w="16806"/><text x="79.3981%" y="287.50">taxi_data`&lt;chrono::na..</text></g><g><title>taxi_data`core::fmt::Write::write_char (5,101 samples, 4.20%)</title><rect x="88.7788%" y="261" width="4.1970%" height="15" fill="rgb(211,67,2)" fg:x="107900" fg:w="5101"/><text x="89.0288%" y="271.50">taxi_..</text></g><g><title>taxi_data`arrow_buffer::buffer::mutable::MutableBuffer::reallocate (301 samples, 0.25%)</title><rect x="92.7282%" y="245" width="0.2477%" height="15" fill="rgb(235,68,52)" fg:x="112700" fg:w="301"/><text x="92.9782%" y="255.50"></text></g><g><title>taxi_data`&lt;core::fmt::Formatter as core::fmt::Write&gt;::write_char (95 samples, 0.08%)</title><rect x="92.9759%" y="277" width="0.0782%" height="15" fill="rgb(246,142,3)" fg:x="113001" fg:w="95"/><text x="93.2259%" y="287.50"></text></g><g><title>taxi_data`arrow_cast::display::write_timestamp (50,117 samples, 41.24%)</title><rect x="54.2604%" y="309" width="41.2357%" height="15" fill="rgb(241,25,7)" fg:x="65947" fg:w="50117"/><text x="54.5104%" y="319.50">taxi_data`arrow_cast::display::write_timestamp</text></g><g><title>taxi_data`core::fmt::write (48,290 samples, 39.73%)</title><rect x="55.7636%" y="293" width="39.7324%" height="15" fill="rgb(242,119,39)" fg:x="67774" fg:w="48290"/><text x="56.0136%" y="303.50">taxi_data`core::fmt::write</text></g><g><title>taxi_data`core::fmt::Write::write_char (2,968 samples, 2.44%)</title><rect x="93.0540%" y="277" width="2.4420%" height="15" fill="rgb(241,98,45)" fg:x="113096" fg:w="2968"/><text x="93.3040%" y="287.50">ta..</text></g><g><title>taxi_data`chrono::naive::date::NaiveDate::from_num_days_from_ce_opt (547 samples, 0.45%)</title><rect x="95.4961%" y="309" width="0.4501%" height="15" fill="rgb(254,28,30)" fg:x="116064" fg:w="547"/><text x="95.7461%" y="319.50"></text></g><g><title>taxi_data`core::fmt::Write::write_fmt (21 samples, 0.02%)</title><rect x="95.9461%" y="309" width="0.0173%" height="15" fill="rgb(241,142,54)" fg:x="116611" fg:w="21"/><text x="96.1961%" y="319.50"></text></g><g><title>taxi_data`core::fmt::write (442 samples, 0.36%)</title><rect x="95.9634%" y="309" width="0.3637%" height="15" fill="rgb(222,85,15)" fg:x="116632" fg:w="442"/><text x="96.2134%" y="319.50"></text></g><g><title>taxi_data`&lt;&amp;arrow_array::array::primitive_array::PrimitiveArray&lt;arrow_array::types::TimestampMicrosecondType&gt; as arrow_cast::display::DisplayIndexState&gt;::write (55,966 samples, 46.05%)</title><rect x="50.4468%" y="325" width="46.0481%" height="15" fill="rgb(210,85,47)" fg:x="61312" fg:w="55966"/><text x="50.6968%" y="335.50">taxi_data`&lt;&amp;arrow_array::array::primitive_array::PrimitiveArray&lt;arrow_array:..</text></g><g><title>taxi_data`core::ptr::drop_in_place&lt;arrow_schema::datatype::DataType&gt; (204 samples, 0.17%)</title><rect x="96.3271%" y="309" width="0.1678%" height="15" fill="rgb(224,206,25)" fg:x="117074" fg:w="204"/><text x="96.5771%" y="319.50"></text></g><g><title>taxi_data`&lt;arrow_cast::display::ArrayFormat&lt;F&gt; as arrow_cast::display::DisplayIndex&gt;::write (554 samples, 0.46%)</title><rect x="96.4957%" y="325" width="0.4558%" height="15" fill="rgb(243,201,19)" fg:x="117279" fg:w="554"/><text x="96.7457%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (139 samples, 0.11%)</title><rect x="98.0500%" y="293" width="0.1144%" height="15" fill="rgb(236,59,4)" fg:x="119168" fg:w="139"/><text x="98.3000%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_posix_memalign (19 samples, 0.02%)</title><rect x="98.1644%" y="277" width="0.0156%" height="15" fill="rgb(254,179,45)" fg:x="119307" fg:w="19"/><text x="98.4144%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_memalign (19 samples, 0.02%)</title><rect x="98.1644%" y="261" width="0.0156%" height="15" fill="rgb(226,14,10)" fg:x="119307" fg:w="19"/><text x="98.4144%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (18 samples, 0.01%)</title><rect x="98.1652%" y="245" width="0.0148%" height="15" fill="rgb(244,27,41)" fg:x="119308" fg:w="18"/><text x="98.4152%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_small (15 samples, 0.01%)</title><rect x="98.1841%" y="277" width="0.0123%" height="15" fill="rgb(235,35,32)" fg:x="119331" fg:w="15"/><text x="98.4341%" y="287.50"></text></g><g><title>taxi_data`arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::append_value (1,506 samples, 1.24%)</title><rect x="96.9582%" y="325" width="1.2391%" height="15" fill="rgb(218,68,31)" fg:x="117841" fg:w="1506"/><text x="97.2082%" y="335.50"></text></g><g><title>taxi_data`arrow_buffer::buffer::mutable::MutableBuffer::reallocate (182 samples, 0.15%)</title><rect x="98.0475%" y="309" width="0.1497%" height="15" fill="rgb(207,120,37)" fg:x="119165" fg:w="182"/><text x="98.2975%" y="319.50"></text></g><g><title>taxi_data`__rdl_realloc (40 samples, 0.03%)</title><rect x="98.1644%" y="293" width="0.0329%" height="15" fill="rgb(227,98,0)" fg:x="119307" fg:w="40"/><text x="98.4144%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (14 samples, 0.01%)</title><rect x="98.1997%" y="309" width="0.0115%" height="15" fill="rgb(207,7,3)" fg:x="119350" fg:w="14"/><text x="98.4497%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_memalign (20 samples, 0.02%)</title><rect x="98.2211%" y="261" width="0.0165%" height="15" fill="rgb(206,98,19)" fg:x="119376" fg:w="20"/><text x="98.4711%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_memalign (20 samples, 0.02%)</title><rect x="98.2211%" y="245" width="0.0165%" height="15" fill="rgb(217,5,26)" fg:x="119376" fg:w="20"/><text x="98.4711%" y="255.50"></text></g><g><title>taxi_data`arrow_buffer::buffer::mutable::MutableBuffer::reallocate (25 samples, 0.02%)</title><rect x="98.2211%" y="309" width="0.0206%" height="15" fill="rgb(235,190,38)" fg:x="119376" fg:w="25"/><text x="98.4711%" y="319.50"></text></g><g><title>taxi_data`__rdl_alloc (25 samples, 0.02%)</title><rect x="98.2211%" y="293" width="0.0206%" height="15" fill="rgb(247,86,24)" fg:x="119376" fg:w="25"/><text x="98.4711%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_posix_memalign (25 samples, 0.02%)</title><rect x="98.2211%" y="277" width="0.0206%" height="15" fill="rgb(205,101,16)" fg:x="119376" fg:w="25"/><text x="98.4711%" y="287.50"></text></g><g><title>taxi_data`arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::finish (64 samples, 0.05%)</title><rect x="98.1973%" y="325" width="0.0527%" height="15" fill="rgb(246,168,33)" fg:x="119347" fg:w="64"/><text x="98.4473%" y="335.50"></text></g><g><title>taxi_data`arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::with_capacity (13 samples, 0.01%)</title><rect x="98.2499%" y="325" width="0.0107%" height="15" fill="rgb(231,114,1)" fg:x="119411" fg:w="13"/><text x="98.4999%" y="335.50"></text></g><g><title>taxi_data`arrow_array::temporal_conversions::as_datetime (486 samples, 0.40%)</title><rect x="98.2614%" y="325" width="0.3999%" height="15" fill="rgb(207,184,53)" fg:x="119425" fg:w="486"/><text x="98.5114%" y="335.50"></text></g><g><title>taxi_data`arrow_cast::display::write_timestamp (697 samples, 0.57%)</title><rect x="98.6720%" y="325" width="0.5735%" height="15" fill="rgb(224,95,51)" fg:x="119924" fg:w="697"/><text x="98.9220%" y="335.50"></text></g><g><title>taxi_data`arrow_cast::cast::string::value_to_string (60,436 samples, 49.73%)</title><rect x="49.5203%" y="341" width="49.7260%" height="15" fill="rgb(212,188,45)" fg:x="60186" fg:w="60436"/><text x="49.7703%" y="351.50">taxi_data`arrow_cast::cast::string::value_to_string</text></g><g><title>taxi_data`arrow_cast::cast::cast (65,702 samples, 54.06%)</title><rect x="45.1883%" y="357" width="54.0588%" height="15" fill="rgb(223,154,38)" fg:x="54921" fg:w="65702"/><text x="45.4383%" y="367.50">taxi_data`arrow_cast::cast::cast</text></g><g><title>taxi_data`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (67,808 samples, 55.79%)</title><rect x="43.4613%" y="373" width="55.7916%" height="15" fill="rgb(251,22,52)" fg:x="52822" fg:w="67808"/><text x="43.7113%" y="383.50">taxi_data`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::t..</text></g><g><title>taxi_data`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (19 samples, 0.02%)</title><rect x="99.2529%" y="373" width="0.0156%" height="15" fill="rgb(229,209,22)" fg:x="120630" fg:w="19"/><text x="99.5029%" y="383.50"></text></g><g><title>taxi_data`alloc::raw_vec::finish_grow (15 samples, 0.01%)</title><rect x="99.2562%" y="357" width="0.0123%" height="15" fill="rgb(234,138,34)" fg:x="120634" fg:w="15"/><text x="99.5062%" y="367.50"></text></g><g><title>taxi_data`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (67,852 samples, 55.83%)</title><rect x="43.4465%" y="389" width="55.8278%" height="15" fill="rgb(212,95,11)" fg:x="52804" fg:w="67852"/><text x="43.6965%" y="399.50">taxi_data`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>taxi_data`core::iter::adapters::try_process (67,856 samples, 55.83%)</title><rect x="43.4448%" y="405" width="55.8311%" height="15" fill="rgb(240,179,47)" fg:x="52802" fg:w="67856"/><text x="43.6948%" y="415.50">taxi_data`core::iter::adapters::try_process</text></g><g><title>libsystem_kernel.dylib`madvise (30 samples, 0.02%)</title><rect x="99.3344%" y="325" width="0.0247%" height="15" fill="rgb(240,163,11)" fg:x="120729" fg:w="30"/><text x="99.5844%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (73 samples, 0.06%)</title><rect x="99.3121%" y="341" width="0.0601%" height="15" fill="rgb(236,37,12)" fg:x="120702" fg:w="73"/><text x="99.5621%" y="351.50"></text></g><g><title>taxi_data`alloc::sync::Arc&lt;T,A&gt;::drop_slow (89 samples, 0.07%)</title><rect x="99.3039%" y="357" width="0.0732%" height="15" fill="rgb(232,164,16)" fg:x="120692" fg:w="89"/><text x="99.5539%" y="367.50"></text></g><g><title>taxi_data`core::ptr::drop_in_place&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;arrow_array::types::Int8Type&gt;&gt; (100 samples, 0.08%)</title><rect x="99.2973%" y="373" width="0.0823%" height="15" fill="rgb(244,205,15)" fg:x="120684" fg:w="100"/><text x="99.5473%" y="383.50"></text></g><g><title>taxi_data`alloc::sync::Arc&lt;T,A&gt;::drop_slow (116 samples, 0.10%)</title><rect x="99.2858%" y="389" width="0.0954%" height="15" fill="rgb(223,117,47)" fg:x="120670" fg:w="116"/><text x="99.5358%" y="399.50"></text></g><g><title>taxi_data`&lt;datafusion::datasource::schema_adapter::SchemaMapping as datafusion::datasource::schema_adapter::SchemaMapper&gt;::map_batch (68,018 samples, 55.96%)</title><rect x="43.4193%" y="421" width="55.9644%" height="15" fill="rgb(244,107,35)" fg:x="52771" fg:w="68018"/><text x="43.6693%" y="431.50">taxi_data`&lt;datafusion::datasource::schema_adapter::SchemaMapping as datafusion::datasource::..</text></g><g><title>taxi_data`core::ptr::drop_in_place&lt;arrow_array::record_batch::RecordBatch&gt; (130 samples, 0.11%)</title><rect x="99.2768%" y="405" width="0.1070%" height="15" fill="rgb(205,140,8)" fg:x="120659" fg:w="130"/><text x="99.5268%" y="415.50"></text></g><g><title>taxi_data`&lt;futures_util::stream::stream::map::Map&lt;St,F&gt; as futures_core::stream::Stream&gt;::poll_next (115,299 samples, 94.87%)</title><rect x="4.5229%" y="437" width="94.8666%" height="15" fill="rgb(228,84,46)" fg:x="5497" fg:w="115299"/><text x="4.7729%" y="447.50">taxi_data`&lt;futures_util::stream::stream::map::Map&lt;St,F&gt; as futures_core::stream::Stream&gt;::poll_next</text></g><g><title>taxi_data`datafusion::datasource::physical_plan::file_scan_config::PartitionColumnProjector::project (42 samples, 0.03%)</title><rect x="99.3953%" y="437" width="0.0346%" height="15" fill="rgb(254,188,9)" fg:x="120803" fg:w="42"/><text x="99.6453%" y="447.50"></text></g><g><title>taxi_data`arrow_array::record_batch::RecordBatch::try_new_impl (19 samples, 0.02%)</title><rect x="99.4142%" y="421" width="0.0156%" height="15" fill="rgb(206,112,54)" fg:x="120826" fg:w="19"/><text x="99.6642%" y="431.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (19 samples, 0.02%)</title><rect x="99.4438%" y="373" width="0.0156%" height="15" fill="rgb(216,84,49)" fg:x="120862" fg:w="19"/><text x="99.6938%" y="383.50"></text></g><g><title>taxi_data`std::sys::pal::unix::time::Timespec::now (30 samples, 0.02%)</title><rect x="99.4356%" y="405" width="0.0247%" height="15" fill="rgb(214,194,35)" fg:x="120852" fg:w="30"/><text x="99.6856%" y="415.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (29 samples, 0.02%)</title><rect x="99.4364%" y="389" width="0.0239%" height="15" fill="rgb(249,28,3)" fg:x="120853" fg:w="29"/><text x="99.6864%" y="399.50"></text></g><g><title>taxi_data`datafusion_physical_plan::metrics::value::Time::add_elapsed (33 samples, 0.03%)</title><rect x="99.4339%" y="437" width="0.0272%" height="15" fill="rgb(222,56,52)" fg:x="120850" fg:w="33"/><text x="99.6839%" y="447.50"></text></g><g><title>taxi_data`std::time::Instant::elapsed (32 samples, 0.03%)</title><rect x="99.4347%" y="421" width="0.0263%" height="15" fill="rgb(245,217,50)" fg:x="120851" fg:w="32"/><text x="99.6847%" y="431.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (20 samples, 0.02%)</title><rect x="99.4701%" y="405" width="0.0165%" height="15" fill="rgb(213,201,24)" fg:x="120894" fg:w="20"/><text x="99.7201%" y="415.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (32 samples, 0.03%)</title><rect x="99.4611%" y="421" width="0.0263%" height="15" fill="rgb(248,116,28)" fg:x="120883" fg:w="32"/><text x="99.7111%" y="431.50"></text></g><g><title>taxi_data`std::sys::pal::unix::time::Timespec::now (35 samples, 0.03%)</title><rect x="99.4611%" y="437" width="0.0288%" height="15" fill="rgb(219,72,43)" fg:x="120883" fg:w="35"/><text x="99.7111%" y="447.50"></text></g><g><title>taxi_data`&lt;datafusion::datasource::physical_plan::file_stream::FileStream&lt;F&gt; as futures_core::stream::Stream&gt;::poll_next (115,453 samples, 94.99%)</title><rect x="4.4990%" y="453" width="94.9933%" height="15" fill="rgb(209,138,14)" fg:x="5468" fg:w="115453"/><text x="4.7490%" y="463.50">taxi_data`&lt;datafusion::datasource::physical_plan::file_stream::FileStream&lt;F&gt; as futures_core::stream::Stream&gt;::poll_next</text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (119 samples, 0.10%)</title><rect x="99.5063%" y="405" width="0.0979%" height="15" fill="rgb(222,18,33)" fg:x="120938" fg:w="119"/><text x="99.7563%" y="415.50"></text></g><g><title>taxi_data`std::sys::pal::unix::time::Timespec::now (13 samples, 0.01%)</title><rect x="99.6092%" y="405" width="0.0107%" height="15" fill="rgb(213,199,7)" fg:x="121063" fg:w="13"/><text x="99.8592%" y="415.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (13 samples, 0.01%)</title><rect x="99.6092%" y="389" width="0.0107%" height="15" fill="rgb(250,110,10)" fg:x="121063" fg:w="13"/><text x="99.8592%" y="399.50"></text></g><g><title>taxi_data`tokio::runtime::park::wake (144 samples, 0.12%)</title><rect x="99.5022%" y="437" width="0.1185%" height="15" fill="rgb(248,123,6)" fg:x="120933" fg:w="144"/><text x="99.7522%" y="447.50"></text></g><g><title>taxi_data`parking_lot::condvar::Condvar::notify_one_slow (141 samples, 0.12%)</title><rect x="99.5047%" y="421" width="0.1160%" height="15" fill="rgb(206,91,31)" fg:x="120936" fg:w="141"/><text x="99.7547%" y="431.50"></text></g><g><title>taxi_data`tokio::sync::mpsc::bounded::Sender&lt;T&gt;::send::_{{closure}} (155 samples, 0.13%)</title><rect x="99.4965%" y="453" width="0.1275%" height="15" fill="rgb(211,154,13)" fg:x="120926" fg:w="155"/><text x="99.7465%" y="463.50"></text></g><g><title>taxi_data`datafusion_physical_plan::stream::RecordBatchReceiverStreamBuilder::run_input::_{{closure}} (115,619 samples, 95.13%)</title><rect x="4.4949%" y="469" width="95.1299%" height="15" fill="rgb(225,148,7)" fg:x="5463" fg:w="115619"/><text x="4.7449%" y="479.50">taxi_data`datafusion_physical_plan::stream::RecordBatchReceiverStreamBuilder::run_input::_{{closure}}</text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (79 samples, 0.07%)</title><rect x="99.6281%" y="405" width="0.0650%" height="15" fill="rgb(220,160,43)" fg:x="121086" fg:w="79"/><text x="99.8781%" y="415.50"></text></g><g><title>taxi_data`parking_lot::condvar::Condvar::notify_one_slow (94 samples, 0.08%)</title><rect x="99.6265%" y="421" width="0.0773%" height="15" fill="rgb(213,52,39)" fg:x="121084" fg:w="94"/><text x="99.8765%" y="431.50"></text></g><g><title>taxi_data`tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (24 samples, 0.02%)</title><rect x="99.7038%" y="421" width="0.0197%" height="15" fill="rgb(243,137,7)" fg:x="121178" fg:w="24"/><text x="99.9538%" y="431.50"></text></g><g><title>libsystem_kernel.dylib`kevent (24 samples, 0.02%)</title><rect x="99.7038%" y="405" width="0.0197%" height="15" fill="rgb(230,79,13)" fg:x="121178" fg:w="24"/><text x="99.9538%" y="415.50"></text></g><g><title>taxi_data`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::yield_now (124 samples, 0.10%)</title><rect x="99.6248%" y="469" width="0.1020%" height="15" fill="rgb(247,105,23)" fg:x="121082" fg:w="124"/><text x="99.8748%" y="479.50"></text></g><g><title>taxi_data`tokio::runtime::context::with_scheduler (124 samples, 0.10%)</title><rect x="99.6248%" y="453" width="0.1020%" height="15" fill="rgb(223,179,41)" fg:x="121082" fg:w="124"/><text x="99.8748%" y="463.50"></text></g><g><title>taxi_data`tokio::runtime::context::scoped::Scoped&lt;T&gt;::with (123 samples, 0.10%)</title><rect x="99.6256%" y="437" width="0.1012%" height="15" fill="rgb(218,9,34)" fg:x="121083" fg:w="123"/><text x="99.8756%" y="447.50"></text></g><g><title>taxi_data`tokio::runtime::task::raw::poll (115,757 samples, 95.24%)</title><rect x="4.4850%" y="485" width="95.2435%" height="15" fill="rgb(222,106,8)" fg:x="5451" fg:w="115757"/><text x="4.7350%" y="495.50">taxi_data`tokio::runtime::task::raw::poll</text></g><g><title>taxi_data`tokio::runtime::scheduler::multi_thread::worker::Context::run_task (118,993 samples, 97.91%)</title><rect x="1.8241%" y="501" width="97.9060%" height="15" fill="rgb(211,220,0)" fg:x="2217" fg:w="118993"/><text x="2.0741%" y="511.50">taxi_data`tokio::runtime::scheduler::multi_thread::worker::Context::run_task</text></g><g><title>taxi_data`tokio::runtime::scheduler::multi_thread::worker::Context::run (120,486 samples, 99.13%)</title><rect x="0.6080%" y="517" width="99.1344%" height="15" fill="rgb(229,52,16)" fg:x="739" fg:w="120486"/><text x="0.8580%" y="527.50">taxi_data`tokio::runtime::scheduler::multi_thread::worker::Context::run</text></g><g><title>taxi_data`tokio::runtime::blocking::pool::Inner::run (120,503 samples, 99.15%)</title><rect x="0.5957%" y="613" width="99.1484%" height="15" fill="rgb(212,155,18)" fg:x="724" fg:w="120503"/><text x="0.8457%" y="623.50">taxi_data`tokio::runtime::blocking::pool::Inner::run</text></g><g><title>taxi_data`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (120,503 samples, 99.15%)</title><rect x="0.5957%" y="597" width="99.1484%" height="15" fill="rgb(242,21,14)" fg:x="724" fg:w="120503"/><text x="0.8457%" y="607.50">taxi_data`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>taxi_data`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (120,503 samples, 99.15%)</title><rect x="0.5957%" y="581" width="99.1484%" height="15" fill="rgb(222,19,48)" fg:x="724" fg:w="120503"/><text x="0.8457%" y="591.50">taxi_data`tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>taxi_data`&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (120,503 samples, 99.15%)</title><rect x="0.5957%" y="565" width="99.1484%" height="15" fill="rgb(232,45,27)" fg:x="724" fg:w="120503"/><text x="0.8457%" y="575.50">taxi_data`&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>taxi_data`tokio::runtime::scheduler::multi_thread::worker::run (120,503 samples, 99.15%)</title><rect x="0.5957%" y="549" width="99.1484%" height="15" fill="rgb(249,103,42)" fg:x="724" fg:w="120503"/><text x="0.8457%" y="559.50">taxi_data`tokio::runtime::scheduler::multi_thread::worker::run</text></g><g><title>taxi_data`tokio::runtime::context::runtime::enter_runtime (120,503 samples, 99.15%)</title><rect x="0.5957%" y="533" width="99.1484%" height="15" fill="rgb(246,81,33)" fg:x="724" fg:w="120503"/><text x="0.8457%" y="543.50">taxi_data`tokio::runtime::context::runtime::enter_runtime</text></g><g><title>libsystem_pthread.dylib`thread_start (120,505 samples, 99.15%)</title><rect x="0.5957%" y="693" width="99.1501%" height="15" fill="rgb(252,33,42)" fg:x="724" fg:w="120505"/><text x="0.8457%" y="703.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (120,505 samples, 99.15%)</title><rect x="0.5957%" y="677" width="99.1501%" height="15" fill="rgb(209,212,41)" fg:x="724" fg:w="120505"/><text x="0.8457%" y="687.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>taxi_data`std::sys::pal::unix::thread::Thread::new::thread_start (120,505 samples, 99.15%)</title><rect x="0.5957%" y="661" width="99.1501%" height="15" fill="rgb(207,154,6)" fg:x="724" fg:w="120505"/><text x="0.8457%" y="671.50">taxi_data`std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>taxi_data`core::ops::function::FnOnce::call_once{{vtable.shim}} (120,505 samples, 99.15%)</title><rect x="0.5957%" y="645" width="99.1501%" height="15" fill="rgb(223,64,47)" fg:x="724" fg:w="120505"/><text x="0.8457%" y="655.50">taxi_data`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>taxi_data`std::sys::backtrace::__rust_begin_short_backtrace (120,505 samples, 99.15%)</title><rect x="0.5957%" y="629" width="99.1501%" height="15" fill="rgb(211,161,38)" fg:x="724" fg:w="120505"/><text x="0.8457%" y="639.50">taxi_data`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>taxi_data`tokio::sync::mpsc::chan::Rx&lt;T,S&gt;::recv (15 samples, 0.01%)</title><rect x="99.7877%" y="565" width="0.0123%" height="15" fill="rgb(219,138,40)" fg:x="121280" fg:w="15"/><text x="100.0377%" y="575.50"></text></g><g><title>taxi_data`&lt;futures_util::stream::unfold::Unfold&lt;T,F,Fut&gt; as futures_core::stream::Stream&gt;::poll_next (23 samples, 0.02%)</title><rect x="99.7820%" y="581" width="0.0189%" height="15" fill="rgb(241,228,46)" fg:x="121273" fg:w="23"/><text x="100.0320%" y="591.50"></text></g><g><title>taxi_data`&lt;futures_util::stream::select_with_strategy::SelectWithStrategy&lt;St1,St2,Clos,State&gt; as futures_core::stream::Stream&gt;::poll_next (43 samples, 0.04%)</title><rect x="99.7704%" y="597" width="0.0354%" height="15" fill="rgb(223,209,38)" fg:x="121259" fg:w="43"/><text x="100.0204%" y="607.50"></text></g><g><title>taxi_data`&lt;datafusion_physical_plan::stream::ObservedStream as futures_core::stream::Stream&gt;::poll_next (46 samples, 0.04%)</title><rect x="99.7704%" y="613" width="0.0378%" height="15" fill="rgb(236,164,45)" fg:x="121259" fg:w="46"/><text x="100.0204%" y="623.50"></text></g><g><title>taxi_data`taxi_data::main::_{{closure}} (70 samples, 0.06%)</title><rect x="99.7573%" y="661" width="0.0576%" height="15" fill="rgb(231,15,5)" fg:x="121243" fg:w="70"/><text x="100.0073%" y="671.50"></text></g><g><title>taxi_data`datafusion::dataframe::DataFrame::collect::_{{closure}} (68 samples, 0.06%)</title><rect x="99.7589%" y="645" width="0.0559%" height="15" fill="rgb(252,35,15)" fg:x="121245" fg:w="68"/><text x="100.0089%" y="655.50"></text></g><g><title>taxi_data`&lt;futures_util::stream::try_stream::try_collect::TryCollect&lt;St,C&gt; as core::future::future::Future&gt;::poll (57 samples, 0.05%)</title><rect x="99.7680%" y="629" width="0.0469%" height="15" fill="rgb(248,181,18)" fg:x="121256" fg:w="57"/><text x="100.0180%" y="639.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (199 samples, 0.16%)</title><rect x="99.8239%" y="629" width="0.1637%" height="15" fill="rgb(233,39,42)" fg:x="121324" fg:w="199"/><text x="100.0739%" y="639.50"></text></g><g><title>taxi_data`tokio::runtime::context::runtime::enter_runtime (304 samples, 0.25%)</title><rect x="99.7490%" y="677" width="0.2501%" height="15" fill="rgb(238,110,33)" fg:x="121233" fg:w="304"/><text x="99.9990%" y="687.50"></text></g><g><title>taxi_data`tokio::runtime::park::Inner::park (224 samples, 0.18%)</title><rect x="99.8149%" y="661" width="0.1843%" height="15" fill="rgb(233,195,10)" fg:x="121313" fg:w="224"/><text x="100.0649%" y="671.50"></text></g><g><title>taxi_data`parking_lot::condvar::Condvar::wait_until_internal (220 samples, 0.18%)</title><rect x="99.8182%" y="645" width="0.1810%" height="15" fill="rgb(254,105,3)" fg:x="121317" fg:w="220"/><text x="100.0682%" y="655.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (14 samples, 0.01%)</title><rect x="99.9877%" y="629" width="0.0115%" height="15" fill="rgb(221,225,9)" fg:x="121523" fg:w="14"/><text x="100.2377%" y="639.50"></text></g><g><title>all (121,538 samples, 100%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(224,227,45)" fg:x="0" fg:w="121538"/><text x="0.2500%" y="719.50"></text></g><g><title>taxi_data`tokio::runtime::runtime::Runtime::block_on (309 samples, 0.25%)</title><rect x="99.7458%" y="693" width="0.2542%" height="15" fill="rgb(229,198,43)" fg:x="121229" fg:w="309"/><text x="99.9958%" y="703.50"></text></g></svg></svg>